import "pkg:/source/UIBuilder/view/ZUIBScreenVM.bs"
import "pkg:/source/lib/ViewUtils.bs"
import "pkg:/source/mixin/KeyboardDialogMixin.bs"

namespace Applicaster
class ForgotPaswordScreenVM extends ZUIBScreenVM

'styles
public inputStyle = invalid
public processButtonStyle = invalid
public usernamePlaceholderText = ""

'state
public isCredsValid = false
public isProcessButtonEnalbed = false
public isRefreshing = true
public isLoading = false
public usernameButtonType = "textInput"

public usernameText = ""
public username = ""

public errorText = ""
public isErrorShowing = false

private providerId = invalid
private focusIds = ["usernameInput", "processButton"]

public function new(riversJson)
  super(riversJson, "ForgotPaswordScreenVM")
  
  m.focusId = "usernameInput"
  KeyboardDialogMixin.mixin(m)
  m.processStyles(m.riversJson.styles)
  m.providerId = m.getAuthProviderId()
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Overridden
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public override function createContent()
  m.logInfo("createContent is overridden in this screen")
end function

public override function load() as boolean
  m.logInfo("load - refreshing login")
  m.refreshLogin() 
  return true
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ styles
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function processStyles(styles)
  m.setField("usernameText", styles.username_placeholder_text)
  m.usernamePlaceholderText = m.usernameText
  
  inputStyle = ViewUtils.makeUIBButtonStyle(styles, "general_input", "textInputPlaceholder")
  
  m.setField("inputStyle", inputStyle)
  
  m.processButtonStyle = ViewUtils.makeUIBButtonStyle(styles, "login_button", "custom", styles.login_button_text)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ callbacks
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function onProcessButtonSelected(value)
  m.logMethod("onProcessButtonSelected")
  
  if not m.isLoading and m.isCredsValid
    m.process()
  else if not m.isCredsValid
    m.setField("errorText", "Please enter your email address")
    m.setfield("isErrorShowing", true)
  else
    m.logWarn("ignoring loging button, while loading")
  end if
end function

public function onUsernameButtonSelected(value)
  m.showKeyboardDialog("Enter your username", m.username, "onUsernameKeyboardDialogDismissal")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Keyboard dialog
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

private function onUsernameKeyboardDialogDismissal(text)
  m.logMethod("onKeyboardDialogDismissal")
  
  if text.trim() = ""
    m.setField("usernameText", m.usernamePlaceholderText)
    m.setField("usernameButtonType", "textInputPlaceholder")
    m.username = ""
    m.setField("usernameText", m.usernamePlaceholderText)
  else
    m.setField("usernameText", text)
    m.username = text
    m.setField("usernameButtonType", "textInput")
  end if 
  
  m.checkCredsValid()
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ refresh
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

private function refreshLogin()
  m.logInfo("calling authTask to refresh login")
  
  m.authTask = m.createAuthTask("execLoad", m.providerId, "onRefreshComplete")
  
  m.setField("isRefreshing", true)
  m.setField("isProcessButtonEnalbed", false)
end function

private function onRefreshComplete(result)
  m.logMethod("onRefreshComplete", result)
  m.setField("isLoading", false)
  
  if m.getInstance("user").isLoggedIn
    m.setField("state", "success")
  end if
  
  m.setField("isRefreshing", false)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ login
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function checkCredsValid()
  m.setField("isCredsValid", m.usernameText <> invalid and m.usernameText.trim() <> "")
  
  m.setField("isProcessButtonEnalbed", m.isCredsValid and not m.isLoading)
end function

public function process()
  m.logInfo("logging in")
  
  if m.isCredsValid
    creds = m.createInstance("AuthenticationCredentials")
    creds.username = m.usernameText
    m.authTask = m.createAuthTask("execForgotPassword", m.providerId, "onProcessComplete", creds)
    
    m.setField("isProcessButtonEnalbed", false)
    
    m.setField("isLoading", true)
    m.setField("errorText", "")
    m.setField("isErrorShowing", false)
    m.setField("state", "loading")
  end if
end function

public function onProcessComplete(result)
  m.logMethod("onProcessComplete", result)
  
  if result <> invalid and result.state = "valid"
    m.logInfo("logged in succesfull")
    m.dismiss("success")
  else
    m.setField("state", "ready")
    if result <> invalid and result.message <> invalid
      m.setField("errorText", result.message)
    else
      m.setField("errorText", "Unknown error")
    end if
    m.setField("isErrorShowing", true)
    m.setField("isProcessButtonEnalbed", true)
  end if
  
  m.setField("isLoading", false)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Key Handling
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function isCapturingAnyKeyPress(key, press)
  'do not anyone escape this screen!
  if press and key = "back" and not MU.getContentField(m.riversJson, "general.isflowBlocker", true)
    return false
  else
    return true
  end if
end function

public function onKeyPressBack() as boolean
  m.logMethod("onKeyPressBack", m.focusId)
  
  if m.focusId = "usernameInput"
    if not MU.getContentField(m.riversJson, "general.is_flow_blocker", true)
      m.dismiss("cancel")
      return true
    else
      'TODO - exit app?
      return false
    end if
  else
    return m.onKeyPressUp()
  end if
  
  return false
end function

public function onKeyPressRight() as boolean
  
  if m.focusId = "processButton" and m.riversJson.styles.debug_skip_on_right = true
    m.logWarn("skipping debug flag is on")
    m.onProcessComplete(true)
  end if
  
  return false
end function

public function onKeyPressDown() as boolean
  m.logMethod("onKeyPressDown", m.focusId)
  
  m.setFocusId(MU.getItemAtOffset(m.focusIds, m.focusId, 1))
  
  return true
end function

public function onKeyPressOption() as boolean
  m.logMethod("onKeyPressOption", m.focusId)
  
  m.onUsernameKeyboardDialogDismissal(m.riversJson.styles.debug_username)
  
  return true
end function

public override function onKeyPressUp() as boolean
  m.logMethod("onKeyPressUp", m.focusId)
  
  m.setFocusId(MU.getItemAtOffset(m.focusIds, m.focusId, - 1))
  
  return true
end function

end class
end namespace