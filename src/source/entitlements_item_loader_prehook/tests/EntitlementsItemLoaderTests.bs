'@TestSuite OCURLTAT EntitlementsItemLoader

namespace Applicaster.EntitlementsItemLoader.Tests

'@BeforeEach
function BeforeEach()
  AppService.clearClassInstances()
  m.modelLocator = CreateObject("roSGNode", "ModelLocator")
  m.modelLocator.plugins = [PPMT_CreatePluginJson("oc_url_token_appender", {
      "endpoint": "e/"
      "domain": "d"
      "matching_path": "itemType"
      "matching_value": "video" 
  })] 
  
  TU.setModelLocator(m.modelLocator)
  
  m.appender = new EntitlementsItemLoader()
end function

'@AfterEach
function afterEach()
  TU.unsetModelLocator()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests constructor
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test no plugin
function constructor_noPlugin()
  m.modelLocator.plugins = [] 
  AppService.clearClassInstances()
  
  m.appender = new EntitlementsItemLoader()
  
  m.assertNotInvalid(m.appender.plugins)
  m.assertFalse(m.appender.isValid)
end function

'@Test valid plugin
function constructor_valid()
  m.assertTrue(m.appender.isValid)
  m.assertEqual(m.appender.endpoint, "e/?domain=d")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests execute
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test no item
'@Params[invalid]
'@Params[{"currentItem": invalid}]
'@Params[{"currentItem": {"id": "noUrl"}}]
'@Params[{"currentItem": {"id": "emptyUrl", "url": invalid}}]
'@Params[{"currentItem": {"id": "emptyUrl", "url": ""}}]
function execute_no_item(currentSelection)
  m.expectOnce(m.appender, "getInstance", ["currentSelection"], currentSelection)
  m.expectNone(m.appender, "isItemMatch")
  
  m.assertEqual(m.appender.execute(), "error")
  
end function

'@Test no match
function execute_item_no_match()
  currentSelection = { "id" : "currentSelection" }
  item = { 
    id : "item"
    url: "url"
    title: "t"
  }
  currentSelection.currentItem = item 
  
  m.expectOnce(m.appender, "getInstance", ["currentSelection"], currentSelection)
  m.expectOnce(m.appender, "isItemMatch", [item], false)
  
  m.assertEqual(m.appender.execute(), "success")
  
end function

'@Test item - is match - invalid
'@Params["u1", "e/?domain=d&url=u1", invalid, "u1", "error"]
'@Params["u2", "e/?domain=d&url=u2", "", "u2", "error"]
function execute_item_invalid(url, serviceUrl, response, finalUrl, result)
  currentSelection = { "id" : "currentSelection" }
  item = { 
    id : "item"
    url: url
    title: "t"
  }
  currentSelection.currentItem = item
  m.expectOnce(m.appender, "getInstance", ["currentSelection"], currentSelection)
  m.expectOnce(m.appender, "isItemMatch", [item], true)
  request = { "id" : "request" }
  m.expectOnce(request, "getSync", [serviceUrl], response)
  
  m.expectOnce(m.appender, "getClassInstance", ["RequestModule"], request)
  
  m.expectNone(item, "addFields")
  
  m.assertEqual(m.appender.execute(), result)
  m.assertEqual(item.url, finalUrl)
end function

'@Test item - is match - valid
'@Params["u3", "e/?domain=d&url=u3", "newUrl", "newUrl", "success"]
'@Params["u3", "e/?domain=d&url=u3", "someotherUrl", "someotherUrl", "success"]
function execute_item_valid(url, serviceUrl, response, finalUrl, result)
  response = formatJson(response) ' this is the weird format the service gives us
  currentSelection = { "id" : "currentSelection" }
  item = { 
    id : "item"
    url: url
    title: "t"
  }
  currentSelection.currentItem = item
  m.expectOnce(m.appender, "getInstance", ["currentSelection"], currentSelection)
  m.expectOnce(m.appender, "isItemMatch", [item], true)
  request = { "id" : "request" }
  m.expectOnce(request, "getSync", [serviceUrl], response)
  
  m.expectOnce(m.appender, "getClassInstance", ["RequestModule"], request)
  
  m.expectOnce(item, "addFields", [{"originalUrl": url}], result)
  
  m.assertEqual(m.appender.execute(), result)
  m.assertEqual(item.url, finalUrl)
end function

'@Test item - is match - modified
'@Params["u3", "e/?domain=d&url=oUrl", "newUrl", "newUrl", "success"]
'@Params["u3", "e/?domain=d&url=oUrl", "someotherUrl", "someotherUrl", "success"]
function execute_item_valid_modified(url, serviceUrl, response, finalUrl, result)
  response = formatJson(response) ' this is the weird format the service gives us
  currentSelection = { "id" : "currentSelection" }
  item = { 
    id : "item"
    url: url
    originalUrl: "oUrl"
    title: "t"
  }
  currentSelection.currentItem = item
  m.expectOnce(m.appender, "getInstance", ["currentSelection"], currentSelection)
  m.expectOnce(m.appender, "isItemMatch", [item], true)
  request = { "id" : "request" }
  m.expectOnce(request, "getSync", [serviceUrl], response)
  
  m.expectOnce(m.appender, "getClassInstance", ["RequestModule"], request)
  
  m.expectNone(item, "addFields")
  
  m.assertEqual(m.appender.execute(), result)
  m.assertEqual(item.url, finalUrl)
  m.assertEqual(item.originalUrl, "oUrl")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests isItemMatch
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test 
'@Params["all", "", {}, true]
'@Params["all", "", {"id":"stuff"}, true]
'@Params["", "", {"id":"stuff"}, false]
'@Params["json.free", "true", {"id":"stuff"}, false]
'@Params["json.free", "true", {"id":"stuff", "json": {"free": false}}, false]
'@Params["json.free", "true", {"id":"stuff", "json": {"free": true}}, true]
'@Params["itemType", "channel", {"id":"stuff", "itemType": "video"}, false]
'@Params["itemType", "video", {"id":"stuff", "itemType": "video"}, true]
function isItemMatch(path, value, item, isMatch)
  m.appender.matchingPath = path
  m.appender.matchingValue = value
  m.assertEqual(m.appender.isItemMatch(item), isMatch)
  
end function

end namespace
