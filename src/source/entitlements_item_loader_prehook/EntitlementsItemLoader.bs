import "pkg:/source/plugin-support/PluginManager.bs"
import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/lib/Request.bs"
import "pkg:/source/entitlements/EntitlementsManager.bs"

' /**
'  * @module EntitlementsItemLoader
'  * @description retrieves the content url from the entitlements manager
'  */
class EntitlementsItemLoader extends zapp.BaseClass

  public isValid = false
  private matchingPath = ""
  private matchingValue = ""

  @injectClass("zapp.PluginManager")
  private plugins

  public function new()
    super("EntitlementsItemLoader")

    plugin = m.plugins.getPluginById("entitlements_item_loader_prehook")
    m.isValid = plugin.isValid

    if plugin.isValid
      m.matchingPath = plugin.getStringValue("matching_path", "")
      m.matchingValue = plugin.getStringValue("matching_value", "")
    else
      m.log.error("There was no plugin config!")
      m.matchingPath = ""
      m.matchingValue = ""
    end if

  end function

  public function execute()
    item = mc.getPath(m.getInstance("currentSelection"), "currentItem")

    if item = invalid
      m.log.error("no item - entitlements loader requires currentSelection.currentItem is populated")
      return "error"
    end if

    if not m.isItemMatch(item)
      m.log.error("item does not match")
      return "success"
    end if

    entitlementsNode = m.getInstance("entitlements")
    if not entitlementsNode@.isLocked(item)
      m.log.info("item is already unlocked")
      return "success"
    end if

    manager = m.getClassInstance("zapp.entitlements.EntitlementsManager")

    if manager.loadItem(item)
      return "success"
    else
      return "error"
    end if
  end function

  function isItemMatch(item)
    if m.matchingPath = "all"
      return true
    end if

    value = mc.getPath(item.json, m.matchingPath, invalid)
    if not mc.isString(value)
      value = formatJson(value)
    end if
    return value = m.matchingValue
  end function

end class
