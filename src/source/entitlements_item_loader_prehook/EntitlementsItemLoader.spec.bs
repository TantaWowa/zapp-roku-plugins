namespace Applicaster.Tests

  '@TestSuite
  class EntitlementsItemLoaderTests extends Rooibos.BaseTestSuite

    override function beforeEach()
      ZC.AppService.clearClassInstances()
      m.modelLocator = CreateObject("roSGNode", "ModelLocator")
      m.modelLocator.plugins = [TestUtils.CreatePluginJson("oc_url_token_loader", {
          "endpoint": "e/"
          "domain": "d"
          "matching_path": "itemType"
          "matching_value": "video" 
      })] 

      ZC.TestUtils.setModelLocator(m.modelLocator)

      m.loader = new EntitlementsItemLoader()
    end function

    override function afterEach()
      ZC.TestUtils.unsetModelLocator()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests constructor
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '@Test no plugin
    function testConstructor_noPlugin()
      m.modelLocator.plugins = [] 
      ZC.AppService.clearClassInstances()

      m.loader = new EntitlementsItemLoader()

      m.assertNotInvalid(m.loader.plugins)
    end function

    function testConstructor_valid()
      m.assertTrue(m.loader.isValid)
      m.assertEqual(m.loader.endpoint, "e/?domain=d")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests execute
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '@Test no item
    '@Params[invalid]
    '@Params[{"currentItem": invalid}]
    function execute_no_item(currentSelection)
      m.expectOnce(m.loader, "getInstance", ["currentSelection"], currentSelection)
      m.expectNone(m.loader, "isItemMatch", false)

      m.assertEqual(m.loader.execute(), "error")

    end function

    '@Test no match
    function execute_item_no_match()
      currentSelection = { "id": "currentSelection" }
      item = { 
        id: "item"
        url: "url"
        title: "t"
      }
      currentSelection.currentItem = item 

      m.expectOnce(m.loader, "getInstance", ["currentSelection"], currentSelection)
      m.expectOnce(m.loader, "isItemMatch", [item], false)

      m.assertEqual(m.loader.execute(), "success")

    end function

    '@Test item - is match - invalid
    '@Params[false, "error"]
    '@Params[false, "error"]
    '@Params[true, "success"]
    '@Params[true, "success"]
    function execute_item_invalid(response, expectedResult)
      currentSelection = { "id": "currentSelection" }
      item = { 
        id: "item"
        title: "t"
      }
      currentSelection.currentItem = item
      m.expectOnce(m.loader, "getInstance", ["currentSelection"], currentSelection)
      m.expectOnce(m.loader, "isItemMatch", [item], true)

      entitlementsNode = { "id": "entitlements" }
      m.expectOnce(m.loader, "getInstance", ["entitlements"], entitlementsNode)
      m.expectOnce(entitlementsNode, "callFunc", ["isLocked", item], true)

      manager = { "id": "manager" }
      m.expectOnce(m.loader, "getClassInstance", ["Entitlements.EntitlementsManager"], manager)
      m.expectOnce(manager, "loadItem", [item], response)

      m.assertEqual(m.loader.execute(), expectedResult)
    end function

    '@Test item - is match - Already unlocked
    function execute_item_already_loaded()
      currentSelection = { "id": "currentSelection" }
      item = { 
        id: "item"
        title: "t"
      }
      currentSelection.currentItem = item
      m.expectOnce(m.loader, "getInstance", ["currentSelection"], currentSelection)
      m.expectOnce(m.loader, "isItemMatch", [item], true)

      entitlementsNode = { "id": "entitlements" }
      m.expectOnce(m.loader, "getInstance", ["entitlements"], entitlementsNode)
      m.expectOnce(entitlementsNode, "callFunc", ["isLocked", item], false)

      m.expectNone(m.loader, "getClassInstance")

      m.assertEqual(m.loader.execute(), "success")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests isItemMatch
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '@Test 
    '@Params["all", "", {}, true]
    '@Params["all", "", {"id":"stuff"}, true]
    '@Params["", "", {"id":"stuff"}, false]
    '@Params["json.free", "true", {"id":"stuff"}, false]
    '@Params["json.free", "true", {"id":"stuff", "json": {"free": false}}, false]
    '@Params["json.free", "true", {"id":"stuff", "json": {"free": true}}, true]
    '@Params["itemType", "channel", {"id":"stuff", "itemType": "video"}, false]
    '@Params["itemType", "video", {"id":"stuff", "itemType": "video"}, true]
    function isItemMatch(path, value, item, isMatch)
      m.loader.matchingPath = path
      m.loader.matchingValue = value
      m.assertEqual(m.loader.isItemMatch(item), isMatch)

    end function

  end class
end namespace
