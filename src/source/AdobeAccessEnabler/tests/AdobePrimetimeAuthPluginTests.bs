'@TestSuite [APMAT] APMATTests
namespace Applicaster.m.plugin.AdobePrimetimeAuthPluginTests

'@SetUp
function BeforeEach()
  pluginConfiguration = {
    "identifier": "AdobeAccessEnabler",
    "configuration_json": {
      publicKey: "pub"
      secret: "sec"
      requestorID: "rqd"
      resourceID: "rod"
      base_url: "#url"
    }
  }
  
  modelLocator = {
    "constants": { "applicasterDeviceId": "did" }
  }
  
  TU.setModelLocator(modelLocator)
  
  plugin = new BasePlugin(pluginConfiguration)
  
  m.plugin = new AdobePrimetimeAuthPlugin(plugin)
end function

'@AfterEach
function afterEach()
  TU.unsetModelLocator()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests constructor
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test 
function constructor()
  m.assertEqual(m.plugin.request.__className, "RequestModule")
  m.assertEqual(m.plugin.JWTUtil.__className, "JWTUtilModule")
  m.assertEqual(m.plugin.uri.__className, "UriModule")
  m.assertEqual(m.plugin.requestorID, "rqd")
  m.assertEqual(m.plugin.resourceID, "rod")
  m.assertEqual(m.plugin.secret, "sec")
  m.assertEqual(m.plugin.publicKey, "pub")
  m.assertEqual(m.plugin.baseUrl, "#url")
  m.assertEqual(m.plugin.deviceId, "did")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests getAccountInfo
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test
function getAccountInfo()
  m.fail("todo")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests verify
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test expired
function verify_expired()
  result = { "id" : "result" }
  
  m.expectOnce(m.plugin, "isAuthDataExpired", [], true)
  m.expectNone(m.plugin, "getAuthorization", [])
  m.expectOnce(m.plugin, "createErrorResult", ["Invalid token for verification"], result)
  
  m.assertEqual(m.plugin._verify(), result)
end function

'@Test valid
function verify_valid()
  result = { "id" : "result" }
  
  m.expectOnce(m.plugin, "isAuthDataExpired", [], false)
  m.expectOnce(m.plugin, "getAuthorization", [], result)
  
  m.expectNone(m.plugin, "createErrorResult")
  
  m.assertEqual(m.plugin._verify(), result)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests regcode
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test valid
function regcode_valid()
  response = {
    "id": "0c0166e1-9596-4826-a6a4-85a19692d2f4"
    "code": "c"
  }
  m.expectOnce(m.plugin, "signRequest", ["POST", "/reggie/v1/rqd/regcode"], "aut")
  expectedHeaders = {
    "Accept": "application/json"
    "Authorization": "aut"
  }
  
  url = "#url/reggie/v1/rqd/regcode"
  m.expectOnce(m.plugin.request, "post", [url, "deviceId=did", expectedHeaders], response)
  
  result = { "id" : "result" }
  m.expectOnce(m.plugin, "createRegCodeResult", ["c"], result)
  
  m.assertEqual(m.plugin._regcode(), result)
end function

'@Test invalid
'@Params[invalid]
'@Params[{}]
'@Params[{code:invalid}]
'@Params[{code:""}]
function regcode_invalid(response)
  m.expectOnce(m.plugin, "signRequest", ["POST", "/reggie/v1/rqd/regcode"], "aut")
  expectedHeaders = {
    "Accept": "application/json"
    "Authorization": "aut"
  }
  
  url = "#url/reggie/v1/rqd/regcode"
  m.expectOnce(m.plugin.request, "post", [url, "deviceId=did", expectedHeaders], response)
  
  result = { "id" : "result" }
  m.expectOnce(m.plugin, "createRegCodeResult", [invalid, - 1, "Unknown error"], result)
  
  m.assertEqual(m.plugin._regcode(), result)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests poll
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test valid
function poll_valid()
  m.expectOnce(m.plugin, "signRequest", ["GET", "/api/v1/tokens/authn"], "aut")
  expectedHeaders = {
    "Accept": "application/json"
    "Authorization": "aut"
  }
  
  url = "#url/api/v1/tokens/authn?deviceId=did&requestor=rqd"
  response = { "id" : "result", "userId": "uid" }
  m.expectOnce(m.plugin.request, "getJsonSync", [url, expectedHeaders], response)
  
  result = { "id" : "result" }
  m.expectOnce(m.plugin, "getAuthorization", [], result)
  
  m.assertEqual(m.plugin._poll(), result)
end function

'@Test failure
'@Params[invalid, invalid, "error"]
'@Params[invalid, 400, "error"]
'@Params[{"userId": invalid}, 403, "error"]
'@Params[{"userId": ""}, 404, "none"]
'@Params[{"otherField": "value"}, 410, "none"]
function poll_error(response, responseCode, expectedState)
  m.expectOnce(m.plugin, "signRequest", ["GET", "/api/v1/tokens/authn"], "aut")
  expectedHeaders = {
    "Accept": "application/json"
    "Authorization": "aut"
  }
  m.plugin.request.lastResponseCode = responseCode
  
  url = "#url/api/v1/tokens/authn?deviceId=did&requestor=rqd"
  m.expectOnce(m.plugin.request, "getJsonSync", [url, expectedHeaders], response)
  
  result = { "id" : "result", "state": "error" }
  m.expectOnce(m.plugin, "createErrorResult", ["Unknown error"], result)
  
  m.assertEqual(m.plugin._poll(), result)
  
  m.assertEqual(result.state, expectedState)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests logout
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test
function logout()
  m.expectOnce(m.plugin, "signRequest", ["DELETE", "/api/v1/logout"], "aut")
  expectedHeaders = {
    "Accept": "application/json"
    "Authorization": "aut"
  }
  url = "#url/api/v1/logout?deviceId=did"
  m.expectOnce(m.plugin.request, "delete", [url, invalid, expectedHeaders])
  
  result = { "id" : "result" }
  m.expectOnce(m.plugin, "createAuthData", [], result)
  
  m.assertEqual(m.plugin._logOut(), result)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests singRequest
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test
function signRequest()
  testTimestamp = 1531234280
  testNonce = "8bab0b10-3cf6-4a95-94b6-0a0b14d19a33"
  authHeader = m.plugin.signRequest("POST", "/path", testNonce, testTimestamp)
  m.assertNotInvalid(authHeader)
  m.assertEqual(authHeader, "POST requestor_id=rqd, nonce=8bab0b10-3cf6-4a95-94b6-0a0b14d19a33, signature_method=HMAC-SHA1, request_time=1531234280000, request_uri=/path, public_key=pub, signature=f2WXvZ00hPL81BL0L9J8xHxxZp0=")
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests getResourceText
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test no selection
'@Params[invalid]
'@Params[{"currentItem": invalid}]
function getResourceText_no_selection(currentSelection)
  m.expectOnce(m.plugin, "getInstance", ["currentSelection"], currentSelection)
  
  text = m.plugin.getResourceText()
  m.assertEqual(text, "rqd")
end function

'@Test with selection 
function getResourceText_selection()
  m.expectOnce(m.plugin, "getInstance", ["currentSelection"], { "currentItem": { "id": "id1", "title": "t1" } })
  
  text = m.plugin.getResourceText()
  expected = "<rss"
  expected += chr(10) + "    version=""2.0"""
  expected += chr(10) + "    xmlns:media=""http://search.yahoo.com/mrss/"">"
  expected += chr(10) + "  <channel>"
  expected += chr(10) + "    <title>rqd</title>"
  expected += chr(10) + "    <item>"
  expected += chr(10) + "      <title>t1</title>"
  expected += chr(10) + "      <guid>id1</guid>"
  expected += chr(10) + "    </item>"
  expected += chr(10) + "  </channel>"
  expected += chr(10) + "</rss>"
  m.assertEqual(text, expected)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests getAuthorization
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test
'@Params[invalid, 0]
'@Params[404, 404]
'@Params[503, 503]
function getAuthorization(lastResponseCode, expectedCode)
  m.plugin.request.lastResponseCode = lastResponseCode
  
  m.expectOnce(m.plugin, "signRequest", ["GET", "/api/v1/authorize"], "aut")
  expectedHeaders = {
    "Accept": "application/json"
    "Authorization": "aut"
  }
  url = "#url/api/v1/authorize?deviceId=did&requestor=rqd&resource=rqd"
  
  response = {
    "expires": "FIXME"
  }
  m.expectOnce(m.plugin.request, "getJsonSync", [url, expectedHeaders], response)
  
  result = { "id" : "result" }
  token = formatJson(response)
  m.expectOnce(m.plugin, "createAuthData", ["valid", token, token, token, response, 9999, expectedCode], result)
  
  m.expectNone(m.plugin, "createErrorResult")
  
  m.assertEqual(m.plugin.getAuthorization(), result)
end function

'@Test fail
'@Params[invalid]
'@Params[{}]
'@Params[{"expires":invalid}]
'@Params[{"expires":""}]
function getAuthorization_fail(response)
  m.expectOnce(m.plugin, "signRequest", ["GET", "/api/v1/authorize"], "aut")
  expectedHeaders = {
    "Accept": "application/json"
    "Authorization": "aut"
  }
  url = "#url/api/v1/authorize?deviceId=did&requestor=rqd&resource=rqd"
  
  m.expectOnce(m.plugin.request, "getJsonSync", [url, expectedHeaders], response)
  
  result = { "id" : "result" }
  token = formatJson(response)
  m.expectNone(m.plugin, "createAuthData")
  m.expectOnce(m.plugin, "createErrorResult", ["Unknown error"], result)
  
  m.assertEqual(m.plugin.getAuthorization(), result)
end function

end namespace