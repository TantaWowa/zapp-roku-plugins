'@TestSuite [OCGPSVMT]
namespace Tests

  override function beforeEach()
    m.modelLocator = {
      "User": { "isLoggedIn": false }
      "locale": "en"
    }
    zc.TestUtils.setModelLocator(m.modelLocator)

    riversJson = {
      "id": "myAccount"
      "general": { "base_url": "#base_url/" }
      "styles": { "login_screen": "#lis" }
      "localizations": { 
        "en": {} 
      }
    }

    m.vm = new GigyaLoginScreenVM(riversJson)
  end function

  override function afterEach()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests constructor
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test
  function constructor()
    m.assertEqual(m.vm.focusId, "loginButton")
    m.assertTrue(m.vm.isRefreshing)
    m.assertFalse(m.vm.isContentVisible)

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests load
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test not shown before
  function load_not_shown()
    m.expectOnce(m.vm, "getLocalStoreValue", ["gigya_login_screen_roku", "isShown"], invalid)
    m.expectOnce(m.vm, "refreshLogin", [])
    m.expectOnce(m.vm, "setLocalStoreValue", ["gigya_login_screen_roku", "isShown", "true", true])

    m.vm.load()

  end function

  '@Test shown before
  function load_shown()
    m.expectOnce(m.vm, "getLocalStoreValue", ["gigya_login_screen_roku", "isShown"], "true")
    m.expectNone(m.vm, "refreshLogin", [])
    m.expectOnce(m.vm, "dismiss", ["success"])

    m.vm.load()

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests refreshLogin
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test 
  function refreshLogin()
    authTask = { "id": "authTask" }

    m.expectOnce(m.vm, "createAuthTask", ["execLoad", "gigya_auth_plugin_roku", "onRefreshComplete"], authTask)

    m.vm.refreshLogin()

    m.assertEqual(m.vm.authTask, authTask)

    m.assertTrue(m.vm.isRefreshing)
    m.assertFalse(m.vm.isContentVisible)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests onRefreshComplete
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test sucess
  function onRefreshComplete()
    user = { "id": "user", isLoggedIn: true }
    analytics = { "id": "analytics" }

    m.expectOnce(m.vm, "getInstance", ["user"], user)
    m.expectOnce(m.vm, "getInstance", ["analyticsManager"], analytics)
    m.expectOnce(analytics, "callFunc", ["trackEvent", "Login Succesful", "page_loaded", { "provider": "gigya_login_screen_roku" }])
    m.expectOnce(m.vm, "dismiss", ["success"])

    m.vm.isContentVisible = false
    m.vm.isRefreshing = true

    m.vm.onRefreshComplete({})

    m.assertFalse(m.vm.isRefreshing)
    m.assertTrue(m.vm.isContentVisible)

  end function


  '@Test failure
  function onRefreshComplete_failure()
    user = { "id": "user", isLoggedIn: false }
    m.vm.isContentVisible = false
    m.vm.isRefreshing = true

    m.expectOnce(m.vm, "getInstance", ["user"], user)
    m.expectNone(m.vm, "dismiss")
    m.vm.onRefreshComplete({})

    m.assertFalse(m.vm.isRefreshing)
    m.assertTrue(m.vm.isContentVisible)

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests button callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test - focused on loginButton
  function onLoginButtonSelected()
    m.vm.focusId = "loginButton"
    m.expectOnce(m.vm, "showLoginScreen")

    m.vm.onLoginButtonSelected(true)

  end function

  '@Test - focused on logoutButton
  function onSkipButtonSelected()
    m.vm.focusId = "logoutButton"

    m.expectOnce(m.vm, "dismiss", ["success"])
    m.vm.onSkipButtonSelected(true)

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests onKeyPressBack
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test 
  function onKeyPressBack()
    m.vm.focusId = "loginButton"
    m.expectOnce(m.vm, "dismiss", ["cancel"])

    m.assertTrue(m.vm.onKeyPressBack())

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests showLoginScreen
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test found
  function showLoginScreen_found()
    screen = { "id": "screen" }

    m.expectOnce(m.vm, "getScreen", ["#lis"], screen)
    m.expectOnce(m.vm, "push", [screen])
    m.expectOnce(m.vm, "setFocus", [screen])
    m.expectOnce(m.vm, "bindNodeField", [screen, "state", "onLoginScreenStateChange", MOM.createBindingProperties(false)])

    m.vm.showLoginScreen()
  end function

  '@Test not found
  function showLoginScreen_not_found()
    m.expectOnce(m.vm, "getScreen", ["#lis"], invalid)
    m.expectNone(m.vm, "push")
    m.expectNone(m.vm, "setFocus")
    m.expectNone(m.vm, "bindNodeField")

    m.vm.showLoginScreen()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests onLoginStateChanged
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test success
  function onLoginStatechanged_success()
    m.vm.state = "none"

    m.vm.onLoginScreenStateChange("success")

    m.assertEqual(m.vm.state, "success")

  end function

  '@Test other trackable state
  '@Params["error"]
  '@Params["cancel"]
  function onLoginStatechanged_other_state(state)
    m.vm.state = "none"
    m.expectOnce(m.vm, "setFocusId", ["loginButton"])

    m.vm.onLoginScreenStateChange(state)

    m.assertEqual(m.vm.state, "none")

  end function

end class
end namespace