import "pkg:/source/UIBuilder/view/ZUIBScreenVM.bs"

namespace Applicaster.Gigya

class ZGigyaLoginScreenVM extends ZUIBScreenVM

public isContentVisible = false
public isRefreshing = true

public function new(riversJson)
  super(riversJson, "ZGigyaLoginScreenVM")
  m.focusId = "loginButton"
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Overridden
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

override public function load() as boolean
  isShown = m.getSessionStoreValue("gigya_login_screen_roku", "isShown")
  if isShown <> invalid
    m.dismiss("success")
  else
    m.setSessionStoreValue("gigya_login_screen_roku", "isShown", "true")
    m.refreshLogin()
  end if
  return true
end function

override public function createContent()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ general impl
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

private function refreshLogin()
  m.logInfo("calling authTask to refresh login")
  
  m.authTask = m.createAuthTask("execLoad", "gigya_auth_plugin_roku", "onRefreshComplete")
  
  m.setField("isRefreshing", true)
  m.setField("isContentVisible", false)
end function

private function onRefreshComplete(result)
  m.logMethod("onRefreshComplete", result)
  m.setField("isLoading", false)
  
  if m.getInstance("user").isLoggedIn
    analytics = m.getInstance("analyticsManager")
    analytics@.identify("gigya_login_screen_roku")
    analytics@.trackEvent("Login Succesful", "page_loaded", { "provider": "gigya_login_screen_roku" })
    
    m.dismiss("success")
  end if
  
  m.setField("isRefreshing", false)
  m.setField("isContentVisible", true)
end function

private function showLoginScreen()
  screen = m.getScreen(m.riversJson.styles.login_screen)
  
  if screen <> invalid
    m.logInfo("found login screen, displaying now")
    m.push(screen)
    m.setFocus(screen)
    m.bindNodeField(screen, "state", "onLoginScreenStateChange", MOM.createBindingProperties(false))
    
  else
    m.logError("could not get the screen for", m.riversJson.styles.login_screen)
  end if
end function

public function onLoginScreenStateChange(state)
  
  if state = "success" or state = "cancel" or state = "error"
    m.logInfo("screenHook screen requested to finished with state: ", state)
    
    if state = "success"
      m.logInfo("login completed!")
      m.setField("state", "success")
    else
      m.setFocusId("loginButton")
    end if
    
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Callback
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function onLoginButtonSelected(value)
  m.showLoginScreen()
end function

public function onSkipButtonSelected(value)
  m.logMethod("onSkipButtonSelected")
  m.dismiss("success")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Key Handling
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function onKeyPressBack()
  m.logMethod("onKeyPressBack")
  m.dismiss("cancel")
  return true
end function

public function isCapturingAnyKeyPress(key, press)
  return true
end function

public function onKeyPressDown()
  if m.isSkipButtonVisible
    m.setFocusId("skipButton")
  end if
end function

override public function onKeyPressUp()
  m.setFocusId("loginButton")
end function

end class
end namespace