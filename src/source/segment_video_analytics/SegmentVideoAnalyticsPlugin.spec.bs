namespace zapp.tests

  @tags("public", "video", "analytics")
  @suite
  class SegmentVideoAnalyticsPluginPluginTests extends tests.BaseTestSuite

    private constants
    private analyticsManager
    private plugin
    private eventName

    protected override function beforeEach()
      super.beforeEach()
      m.constants = {
        "deviceInfo": { "videoMode": "1080p" }
      }
      m.analyticsManager = { id: "#am" }

      mioc.setInstances({
        "constants": m.constants
        "analyticsManager": m.analyticsManager
      })

      m.plugin = new SegmentVideoAnalyticsPlugin()
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("constructor")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("testConstructor_tests")
    function _()
      m.assertEqual(m.plugin.analyticsManager, m.analyticsManager)
      m.assertEqual(m.plugin.deviceInfo, m.constants.deviceInfo)
      m.assertEqual(m.plugin.videoHeight, "1080")
      m.assertEqual(m.plugin.videoResolution, "1920x1080")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getVideoResolution")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("getVideoResolution")
    @params("1080", "1920x1080")
    @params("2160", "3840x2160")
    @params("720", "1280x720")
    @params("480", "640x480")
    @params("800", "unknown")
    function _(height, expected)
      m.assertEqual(m.plugin.getVideoResolution(height), expected)
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("videoStart")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("videoStart")
    function _()
      videoNode = { id: "videoPlayer", position: 100 }
      contentNode = { id: "content", length: 1000 }

      m.expectOnce(m.plugin, "postSegmentEvent", ["Video Content Started"])

      m.plugin.videoStart(videoNode, contentNode)

      m.assertEqual(m.plugin.videoNode, videoNode)
      m.assertEqual(m.plugin.contentNode, contentNode)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("videoEnd")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("videoEnd")
    function _()
      m.plugin.videoNode = { id: "videoPlayer", position: 100 }
      m.plugin.contentNode = { id: "content", length: 1000 }


      m.expectOnce(m.plugin, "postSegmentEvent", ["Video Completed"])

      m.plugin.videoEnd()

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("videoPause")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("videoPause")
    function _()

      m.expectOnce(m.plugin, "postSegmentEvent", ["Video Paused"])

      m.plugin.videoPause()

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("videoResume")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("videoResume")
    function _()

      m.expectOnce(m.plugin, "postSegmentEvent", ["Video Playback Resume"])

      m.plugin.videoResume()

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("videoHeartbeat")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("videoHeartbeat")
    @params(true, "Video Ad Playing (Heartbeat)")
    @params(false, "Video Heartbeat")
    function _(isInAdBreak, expectedEventName)
      m.plugin.isInAdBreak = isInAdBreak

      m.expectOnce(m.plugin, "postSegmentEvent", [expectedEventName])

      m.plugin.videoHeartbeat()

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("adBreakStart")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("adBreakStart")
    function _()

      m.expectOnce(m.plugin, "postSegmentEvent", ["Video Ad Play"])

      m.plugin.adBreakStart()

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("adBreakEnd")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("adBreakEnd")
    function _()

      m.expectOnce(m.plugin, "postSegmentEvent", ["Video Ad Completed"])

      m.plugin.adBreakEnd()

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onSubtitleChange")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("onSubtitleChange")
    function _()

      m.expectOnce(m.plugin, "postSegmentEvent", ["Subtitle Languge Changed"])

      m.plugin.onSubtitleChange()

    end function

    @it("onAudioChange")
    function _()

      m.expectOnce(m.plugin, "postSegmentEvent", ["Audio Language Selected"])

      m.plugin.onAudioChange()

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getAudioLanguage")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("known")
    @params("1", "cor", "kw")
    @params("2", "cos", "co")
    @params("3", "cre", "cr")
    function _(currentTrack, trackLanguage, countryCode)
      m.plugin.videoNode = {
        "currentAudioTrack": currentTrack,
        "availableAudioTracks": [
          { "Track": "1", "Language": "cor" }
          { "Track": "2", "Language": "cos" }
          { "Track": "3", "Language": "cre" }
        ]
      }

      m.assertEqual(m.plugin.getAudioLanguage(), countryCode)
    end function

    @it("unknown")
    function _()
      m.plugin.videoNode = {
        "currentAudioTrack": "unknown",
        "availableAudioTracks": [
          { "Track": "1", "Language": "cog" }
          { "Track": "2", "Language": "cod" }
          { "Track": "3", "Language": "cok" }
        ]
      }

      m.assertEqual(m.plugin.getAudioLanguage(), "en")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getSubtitleLanguage")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("known")
    @params("1", "cor", "kw")
    @params("2", "cos", "co")
    @params("3", "cre", "cr")
    function _(currentTrack, trackLanguage, countryCode)
      m.plugin.videoNode = {
        "currentSubtitleTrack": currentTrack,
        "availableSubtitleTracks": [
          { "TrackName": "1", "Language": "cor" }
          { "TrackName": "2", "Language": "cos" }
          { "TrackName": "3", "Language": "cre" }
        ]
      }

      m.assertEqual(m.plugin.getSubtitleLanguage(), countryCode)
    end function

    @it("unknown")
    function _()
      m.plugin.videoNode = {
        "currentSubtitleTrack": "unknown",
        "availableSubtitleTracks": [
          { "TrackName": "1", "Language": "cog" }
          { "TrackName": "2", "Language": "cod" }
          { "TrackName": "3", "Language": "cok" }
        ]
      }

      m.assertEqual(m.plugin.getSubtitleLanguage(), "EN")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getProperties")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("getProperties")
    @params("#action1")
    @params("#action2")
    @params(invalid)
    function _(action)
      contentNode = {
        "LIVE": true
        length: 100
        title: "#title"
        "id": "#id"
        "streamInfo": { "measureBitrate": 1000 }
      }

      m.plugin.videoNode = {
        position: 50
        height: 1080
        width: 1920
        duration: 100
      }

      m.plugin.videoResolution = "1920x1080"
      m.expectOnce(m.plugin, "getAudioLanguage", invalid, "fr")
      m.expectOnce(m.plugin, "getSubtitleLanguage", invalid, "es")


      properties = m.plugin.getProperties(contentNode, action)

      m.assertEqual(properties.height, "1080")
      m.assertEqual(properties.width, "1920")
      m.assertEqual(properties.content_title, "#title")
      m.assertEqual(properties.cms_content_id, "#id")
      m.assertEqual(properties.video_length, "100")
      m.assertEqual(properties.video_progress, "50%")
      m.assertEqual(properties.resolution, "1920x1080")
      m.assertEqual(properties.audio_language, "fr")
      m.assertEqual(properties.subtitle_language, "es")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("postSegementEvent")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("postSegementEvent")
    @params("event1")
    @params("event2")
    @params("event3")
    function _(eventName)
      m.plugin.videoNode = { id: "videoPlayer", position: 100 }
      m.plugin.contentNode = { id: "content", length: 1000 }

      props = { "id": "props" }
      m.expectOnce(m.plugin, "getProperties", [m.plugin.contentNode], props)

      matcher = { "matcher": function(value)
          return value.name = m.eventName
        end function
        "eventName": eventName
      }

      m.expectOnce(m.plugin.analyticsManager, "callFunc", ["trackUsingProvider", "segment_analytics", eventName, matcher])

      m.plugin.postSegmentEvent(eventName)

    end function

  end class
end namespace