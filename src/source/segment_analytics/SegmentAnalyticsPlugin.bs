import "pkg:/source/plugin-support/BasePlugin.bs"
import "pkg:/source/plugin-support/PluginManager.bs"
import "./SegmentAnalyticsConnector.brs"
import "pkg:/source/analytics/BaseAnalyticsPlugin.bs"

namespace SegmentAM
class SegmentAnalyticsPlugin extends BaseAnalyticsPlugin

public isIdentified = false
private writeKey = ""
private isDebug = false

public function new(plugin)
  super("SegmentAnalyticsPlugin", plugin)
  
  m.segmentTask = createObject("roSGNode", "SegmentAnalyticsTask")
  m.segmentTask.id = "segmentAnalyticsTask"
  
  constants = m.getInstance("constants")
  m.applicasterDeviceId = constants.applicasterDeviceId
  m.writeKey = plugin.getStringValue("write_key")
  m.isDebug = plugin.getBoolValue("is_debug") 
  m.library = SegmentAnalyticsConnector(m.segmentTask)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ overridden methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

override public function start()
  m.logInfo("starting segment analytics plugin")
  config = {
    "writeKey": m.writeKey
    "debug": true
    "queueSize": 3
    "retryLimit": 0
  }
  
  m.library.init(config)
  m.defaultOptions = m.getDefaultOptions()
  m.defaultProperties = m.getDefaultProperties()
  
end function

override private function mapPropertyValues(properties)
  m.substituteValue(m.valuesMap.providerNames, properties, "provider")
  return properties
end function

override public function _identify(pluginId, traits = {}, options = {})
  m.logInfo("identify", pluginId)
  
  if m.isEnabled and not m.isIdentified
    
    accountInfo = m.getSessionStoreValue(pluginId, "account", true)
    
    m.defaultOptions = m.getDefaultOptions()
    m.defaultProperties = m.getDefaultProperties()
    
    if accountInfo <> invalid 
      options.append(m.defaultOptions)
      
      m.logInfo("identifying analytics with the userId", accountInfo.uid, "for plugin:", plugin)
      m.library.identify(accountInfo.uid, traits, options)
      m.isIdentified = true
    else
      m.logInfo("idenitfy called; but there is no logged in user")
    end if
  end if 
end function

override public function _unidentify(pluginId)
  m.isIdentified = false
  m.defaultOptions = m.getDefaultOptions()
  m.defaultProperties = m.getDefaultProperties()
  m.logWarn("segment does not have an unidentify api, so we idenitfy as anonymous")
  m.library.identify("anonymous", m.defaultOptions, m.defaultProperties)
end function

override public function _track(eventName, properties = {}, options = {})
  m.trackEvent(eventName, invalid, properties, options)
end function

override public function _trackEvent(eventName, actionName = invalid, properties = {}, options = {})
  
  if actionName <> invalid
    properties.name = eventName
    properties.action_name = actionName
  end if
  
  if m.isEnabled
    options.append(m.defaultOptions)
    properties.append(m.defaultProperties)
    
    m.logInfo("TRACK OPTINS ", options)
    m.library.track(eventName, properties, options)
  end if
  
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ private impl
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

private function screen(eventName, category, properties = {}, options = {})
  
  if m.isEnabled
    options.append(m.defaultOptions)
    properties.append(m.defaultProperties)
    m.library.screen(name, category, properties, options)
  end if
  
end function

private function group(eventName, groupId, traits = {}, options = {})
  
  if m.isEnabled
    options.append(m.defaultOptions)
    properties.append(m.defaultProperties)
    m.library.group(userId, groupId, traits, options)
  end if
  
end function

private function getDefaultOptions()
  
  accountInfo = m.getLocalStoreValue("account_info", "Gigya", true)
  
  options = {}
  if accountInfo <> invalid 
    options["userId"] = accountInfo.uid
  else
    options["anonymousId"] = m.applicasterDeviceId
  end if
  
  return options
end function

private function getDefaultProperties()
  
  accountInfo = m.getSessionStoreValue("gigya_auth_plugin_roku", "account", true)
  properties = {
    user_email: "anonymous"
    user_name: "anonymous"
    applicaster_device_id: m.applicasterDeviceId
    platform: "roku"
  }
  
  if accountInfo <> invalid 
    properties.user_gigya_id = accountInfo.uid
  else
    properties.user_gigya_id = "anonymous"
  end if
  
  primetimeAccountInfo = m.getLocalStoreValue("AdobeAccessEnabler", "account", true)
  if primetimeAccountInfo <> invalid 
    'FIXME
    properties.user_adobe_id = primetimeAccountInfo.uid
  else
    properties.user_adobe_id = "anonymous"
  end if
  
  return properties
end function

end namespace