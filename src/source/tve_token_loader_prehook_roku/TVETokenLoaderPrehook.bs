import "pkg:/source/plugin-support/PluginManager.bs"
import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/lib/Request.bs"
import "pkg:/source/lib/URI.bs"

' /**
'  * @module TVETokenLoaderPrehookTests
'  * @description retrieves the specified tokens for TVE account. Requires that Adobe Primetime auth plugin is used, and is logged in via to this prehook running.
'  */
class TVETokenLoaderPrehook extends zapp.BaseClass

  private isValid = false
  private matchingPath = ""
  private matchingValue = ""
  private isLoadingShortToken = false
  private isUsingResourceXml = false
  private tveConfig = invalid

  @injectClass("zapp.PluginManager")
  private plugins

  @injectClass("zapp.Request")
  private request

  @injectClass("zapp.URI")
  private uri

  public function new()
    super("TVETokenLoaderPrehook")
    plugin = m.plugins.getPluginById("tve_token_loader_prehook_roku")
    m.tveConfig = m.getTVEConfig()
    m.isValid = plugin.isValid and m.tveConfig <> invalid

    m.matchingPath = plugin.getStringValue("matching_path", "")
    m.matchingValue = plugin.getStringValue("matching_value", "")
    m.isLoadingShortToken = plugin.getBoolValue("request_short_media_token")
    m.isUsingResourceXml = plugin.getBoolValue("use_rss_format_resource_id")

  end function

  private function getTVEConfig()
    plugin = m.plugins.getPluginById("AdobeAccessEnabler")
    if plugin <> invalid
      constants = m.getInstance("constants")
      return {
        requestorID: plugin.getStringValue("requestorID", "")
        secret: plugin.getStringValue("secret", "")
        publicKey: plugin.getStringValue("publicKey", "")
        baseUrl: plugin.getStringValue("base_url", "https://api.auth.adobe.com")
        deviceId: constants.applicasterDeviceId
      }
    else
      m.log.error("there was no plugin found for AdobeAccessEnabler. It is required that you use AdobeAccessEnabler auth (tve) for this plugin to work")
      return invalid
    end if
  end function


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function execute()
    if not m.isValid
      m.log.error("plugin configuration is not valid. Is Adobe Primetime auth plugin present and configured?")
      return "error"
    end if

    item = mc.getPath(m.getInstance("currentSelection"), "currentItem")

    if item = invalid
      m.log.error("no item - tve token loader prehook requires currentSelection.currentItem is populated")
      return "error"
    end if

    if not m.isItemMatch(item)
      m.log.error("item does not match")
      return "success"
    end if

    if m.loadTokens(item)
      return "success"
    else
      return "error"
    end if
  end function

  function isItemMatch(item)
    if m.matchingPath = "all"
      return true
    end if

    value = mc.getPath(item.json, m.matchingPath, invalid)
    if not mc.isString(value)
      value = formatJson(value)
    end if
    return value = m.matchingValue
  end function

  private function loadTokens(item)
    token = m.getSessionStoreValue("AdobeAccessEnabler", "token")

    m.setSessionStoreValue("tve", "short-token", invalid)

    isError = false
    if token <> invalid
      if m.isLoadingShortToken
        isError = not m.loadShortToken(item) or isError
      end if
    else
      m.log.info("there is no token for AdobeAccessEnabler - not logged in")
    end if

    return not isError
  end function

  private function loadShortToken(item)
    m.log.method("loadShortToken")

    requestPath = "/api/v1/tokens/media"

    headers = {
      "Accept": "application/json"
      "Authorization": m.signRequest("GET", requestPath)
    }
    params = {
      ' "deviceId": m.tveConfig.deviceId
      "requestor": m.tveConfig.requestorID
      "deviceId": m.tveConfig.deviceId
      "resource": m.getResourceText(item)
    }

    url = m.tveConfig.baseUrl + requestPath + "?" + m.uri.encodeParams(params)
    result = m.request.getJsonSync(url, headers)
    m.log.info("result is:", result)
    shortToken = invalid

    if result <> invalid and result.serializedToken <> invalid
      shortToken = m.decodeBase64(result.serializedToken)
    else
      m.log.error("invalid result")
    end if

    m.log.info("setting short-token to", shortToken)
    m.setSessionStoreValue("tve", "short-token", shortToken)

    return shortToken <> invalid
  end function

  private function decodeBase64(encodedString)
    ba = CreateObject("roByteArray")
    ba.FromBase64String(encodedString)
    return ba.ToAsciiString()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private impl
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function signRequest(method, path, nonce = invalid, timestamp = 0)
    di = CreateObject("roDeviceInfo")
    if nonce = invalid
      nonce = di.GetRandomUUID()
    end if

    if timestamp = 0
      timestamp = CreateObject("roDateTime").AsSeconds()
    end if
    timeString = stri(timestamp, 10) + "000"
    stringToSign = method
    stringToSign += " requestor_id=" + m.tveConfig.requestorID
    stringToSign += ", nonce=" + nonce
    stringToSign += ", signature_method=HMAC-SHA1"
    stringToSign += ", request_time=" + timeString
    stringToSign += ", request_uri=" + path
    byteArray = CreateObject("roByteArray")
    byteArray.FromAsciiString(stringToSign)
    digest = CreateObject("roHMAC")
    privateKey = CreateObject("roByteArray")
    privateKey.fromAsciiString(m.tveConfig.secret)
    if digest.setup("sha1", privateKey) <> 0
      m.log.error("signRequest: failed to set up HMAC digest")
      return invalid
    end if
    signature = digest.process(byteArray)
    signatureBase64 = signature.toBase64String()
    header = stringToSign
    header += ", public_key=" + m.tveConfig.publicKey
    header += ", signature=" + signatureBase64
    return header
  end function

  private function getResourceText(item)
    if m.isUsingResourceXml
      template = ReadAsciiFile("pkg:/source/AdobeAccessEnabler/adobeAuthorizationTemplate.xml")
      template = template.replace("{REQUESTOR_ID}", m.tveConfig.requestorID.escape())
      template = template.replace("{ASSET_ID}", item.id.escape())
      template = template.replace("{ASSET_NAME}", item.title.escape())
      return template
    else
      return m.tveConfig.requestorId
    end if
  end function

end class