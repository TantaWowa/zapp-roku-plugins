import "pkg:/source/UIBuilder/view/ScreenVM.bs"
import "pkg:/source/lib/ViewUtils.bs"
import "pkg:/source/mixin/KeyboardDialogMixin.bs"

class RegisterScreenVM extends zapp.uib.ScreenVM
  'styles
  public inputStyle = invalid
  public registerButtonStyle = invalid
  public usernamePlaceholderText = ""
  public namePlaceholderText = ""
  public passwordPlaceholderText = ""

  'state
  public isCredsValid = false
  public isRegisterButtonEnabled = false
  public isMainGroupVisible = true
  public isDoneGroupVisible = false
  public nameButtonType = "textInput"
  public usernameButtonType = "textInput"
  public passwordButtonType = "textInput"

  public usernameText = ""
  public username = ""
  public humanNameText = ""
  public humanName = ""
  public passwordText = ""
  public password = ""

  public errorText = ""
  public isErrorShowing = false

  private providerId = invalid
  private focusIds = ["usernameInput", "nameInput", "passwordInput", "registerButton"]
  private maxDebugAccounts = 1
  private debugAccountId = 0

  public function new(riversJson)
    super(riversJson, "RegisterScreenVM")

    m.focusId = "usernameInput"
    zapp.keyboardDialogMixin.mixin(m)
    m.processStyles(m.riversJson.styles)
    m.providerId = m.getAuthProviderId()

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Overridden
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function createContent()
    m.logInfo("createContent is overridden in this screen")
  end function

  public override function load() as boolean
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ styles
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function processStyles(styles)
    m.setField("usernameText", m.localizations.username_placeholder_text)
    m.usernamePlaceholderText = m.usernameText

    m.setField("humanNameText", m.localizations.name_placeholder_text)
    m.namePlaceholderText = m.humanNameText

    m.setField("passwordText", m.localizations.password_placeholder_text)
    m.passwordPlaceholderText = m.passwordText

    inputStyle = zapp.viewUtils.makeUIBButtonStyle(styles, "general_input", "textInputPlaceholder")

    m.setField("inputStyle", inputStyle)

    m.registerButtonStyle = zapp.viewUtils.makeUIBButtonStyle(styles, "register_button", "custom", styles.register_button_text)

    m.maxDebugAccounts = zapp.viewUtils.getUIBInt(styles, "debug_max_accounts")

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function onUsernameButtonSelected(value)
    m.showKeyboardDialog("Enter your username", m.username, "onUsernameKeyboardDialogDismissal")
  end function

  public function onNameButtonSelected(value)
    m.showKeyboardDialog("Enter your name", m.humanName, "onNameKeyboardDialogDismissal")
  end function

  public function onPasswordButtonSelected(value)
    m.showKeyboardDialog("Enter your password", m.password, "onPasswordKeyboardDialogDismissal", true)
  end function

  public function onRegisterButtonSelected(value)
    m.logMethod("onRegisterButtonSelected")

    if not m.isLoading and m.isCredsValid
      m.register()
    else if not m.isCredsValid
      m.setField("errorText", "Please enter your email address and password")
      m.setfield("isErrorShowing", true)
    else
      m.logWarn("ignoring register button, while loading")
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Keyboard dialog
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onUsernameKeyboardDialogDismissal(text)
    m.logMethod("onKeyboardDialogDismissal")
    zapp.keyboardDialogMixin.setTextFromKeyboard(m, "username", text)
  end function

  private function onNameKeyboardDialogDismissal(text)
    m.logMethod("onNameKeyboardDialogDismissal")
    zapp.keyboardDialogMixin.setTextFromKeyboard(m, "humanName", text)
  end function

  private function onPasswordKeyboardDialogDismissal(text)
    m.logMethod("onPasswordKeyboardDialogDismissal")
    zapp.keyboardDialogMixin.setTextFromKeyboard(m, "password", text, true)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ register
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function checkCredsValid()
    m.setField("isCredsValid", m.usernameText <> invalid and m.usernameText.trim() <> "" and m.password <> invalid and m.password.trim() <> "" and m.humanNameText <> invalid and m.humanNameText.trim() <> "")

    m.setField("isRegisterButtonEnabled", m.isCredsValid and not m.isLoading)
  end function

  public function register()
    m.logInfo("registering")

    if m.isCredsValid
      creds = m.createInstance("AuthenticationCredentials")
      creds.name = m.humanNameText
      creds.username = m.usernameText
      creds.password = m.password
      creds.passwordConfirmation = m.password
      m.authTask = m.createAuthTask("execRegister", m.providerId, "onRegisterComplete", creds)

      m.setField("isLoginButtonEnabled", false)

      m.setField("isLoading", true)
      m.setField("errorText", "")
      m.setField("isErrorShowing", false)
      m.setField("state", "loading")
    end if
  end function

  public function onRegisterComplete(result)
    m.logMethod("onRegisterComplete", result)

    if result <> invalid and result.state = "valid"
      m.logInfo("Register successful")
      m.dismiss("success")
    else
      m.setField("state", "ready")
      if result <> invalid and result.message <> invalid
        m.setField("errorText", result.message)
      else
        m.setField("errorText", "Unknown error")
      end if
      m.setField("isErrorShowing", true)
      m.setField("isLoginButtonEnabled", true)
    end if

    m.setField("isLoading", false)

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  'FIXME! hoist this into the base ViewModel in SDK 3.2
  'it is duplicated form RegcodeLoginScreenVM


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Handling
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function isCapturingAnyKeyPress(key, press)
    'do not anyone escape this screen!
    if press and key = "back" and not MU.getContentField(m.riversJson, "general.isflowBlocker", true)
      return false
    else
      return true
    end if
  end function

  public function onKeyPressBack() as boolean
    m.logMethod("onKeyPressBack", m.focusId)

    m.dismiss("cancel")
    return true
  end function

  public function onKeyPressRight() as boolean

    if m.focusId = "loginButton" and m.riversJson.styles.debug_skip_on_right = true
      m.logWarn("skipping debug flag is on")
      m.onRegisterComplete(true)
    end if

    return false
  end function

  public function onKeyPressDown() as boolean
    m.logMethod("onKeyPressDown", m.focusId)

    m.setFocusId(mc.getPath(m.focusIds, m.focusId, 1))

    return true
  end function

  public function onKeyPressOption() as boolean
    m.logMethod("onKeyPressOption", m.focusId)
    m.debugAccountId++
    if m.debugAccountId > m.maxDebugAccounts
      m.debugAccountId = 1
    end if
    username = m.riversJson.styles.debug_username.replace("@", str(m.debugAccountId).trim() + "@")

    m.onUsernameKeyboardDialogDismissal(username)
    m.onNameKeyboardDialogDismissal(m.riversJson.styles.debug_name)
    m.onPasswordKeyboardDialogDismissal(m.riversJson.styles.debug_password)
    return true
  end function

  public override function onKeyPressUp() as boolean
    m.logMethod("onKeyPressUp", m.focusId)

    m.setFocusId(mc.getPath(m.focusIds, m.focusId, -1))

    return true
  end function

end class