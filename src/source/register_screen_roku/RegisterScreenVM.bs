import "pkg:/source/UIBuilder/view/ZUIBScreenVM.bs"
import "pkg:/source/lib/ViewUtils.bs"
import "pkg:/source/mixin/KeyboardDialogMixin.bs"

namespace Applicaster
class RegisterScreenVM extends ZUIBScreenVM

'styles
public inputStyle = invalid
public registerButtonStyle = invalid
public usernamePlaceholderText = ""
public namePlaceholderText = ""
public passwordPlaceholderText = ""
public confirmPasswordPlaceholderText = ""

'state
public isCredsValid = false
public isRegisterButtonEnabled = false
public isMainGroupVisible = true
public isDoneGroupVisible = false
public isLoading = false
public nameButtonType = "textInput"
public usernameButtonType = "textInput"
public passwordButtonType = "textInput"
public confirmPasswordButtonType = "textInput"

public usernameText = ""
public username = ""
public nameText = ""
public name = ""
public passwordText = ""
public password = ""
public confirmPasswordText = ""
public confirmPassword = ""

public errorText = ""
public isErrorShowing = false

private providerId = invalid
private focusIds = ["usernameInput", "nameInput", "passwordInput", "confirmPasswordInput", "registerButton"]

public function new(riversJson)
  super(riversJson, "RegisterScreenVM")
  
  m.focusId = "usernameInput"
  KeyboardDialogMixin.mixin(m)
  m.processStyles(m.riversJson.styles)
  m.providerId = m.getAuthProviderId()
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Overridden
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public override function createContent()
  m.logInfo("createContent is overridden in this screen")
end function

public override function load() as boolean
  return true
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ styles
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function processStyles(styles)
  m.setField("usernameText", styles.username_placeholder_text)
  m.usernamePlaceholderText = m.usernameText
  
  m.setField("nameText", styles.name_placeholder_text)
  m.namePlaceholderText = m.nameText
  
  m.setField("passwordText", styles.password_placeholder_text)
  m.passwordPlaceholderText = m.passwordText
  
  m.setField("confirmPasswordText", styles.confirm_password_placeholder_text)
  m.confirmPasswordPlaceholderText = m.confirmPasswordText
  
  inputStyle = ViewUtils.makeUIBButtonStyle(styles, "general_input", "textInputPlaceholder")
  
  m.setField("inputStyle", inputStyle)
  
  m.registerButtonStyle = ViewUtils.makeUIBButtonStyle(styles, "register_button", "custom", styles.register_button_text)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ callbacks
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function onUsernameButtonSelected(value)
  m.showKeyboardDialog("Enter your username", m.username, "onUsernameKeyboardDialogDismissal")
end function

public function onNameButtonSelected(value)
  m.showKeyboardDialog("Enter your name", m.username, "onNameKeyboardDialogDismissal")
end function

public function onPasswordButtonSelected(value)
  m.showKeyboardDialog("Enter your password", m.password, "onPasswordKeyboardDialogDismissal", true)
end function

public function onConfirmPasswordButtonSelected(value)
  m.showKeyboardDialog("Enter your password again", m.password, "onConfirmPasswordKeyboardDialogDismissal", true)
end function


public function onRegisterButtonSelected(value)
  m.logMethod("onRegisterButtonSelected")
  
  if not m.isLoading and m.isCredsValid
    m.register()
  else if not m.isCredsValid
    m.setField("errorText", "Please enter your email address and password")
    m.setfield("isErrorShowing", true)
  else
    m.logWarn("ignoring register button, while loading")
  end if
end function

public function onDoneButtonSelected(value)
  m.logMethod("onDoneButtonSelected")
  m.dismiss("success")
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Keyboard dialog
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

private function onUsernameKeyboardDialogDismissal(text)
  m.logMethod("onKeyboardDialogDismissal")
  
  if text.trim() = ""
    m.setField("usernameText", m.usernamePlaceholderText)
    m.setField("usernameButtonType", "textInputPlaceholder")
    m.username = ""
    m.setField("usernameText", m.usernamePlaceholderText)
  else
    m.setField("usernameText", text)
    m.username = text
    m.setField("usernameButtonType", "textInput")
  end if 
  
  m.checkCredsValid()
  
end function

private function onNameKeyboardDialogDismissal(text)
  m.logMethod("onNameKeyboardDialogDismissal")
  
  if text.trim() = ""
    m.setField("nameText", m.namePlaceholderText)
    m.setField("nameButtonType", "textInputPlaceholder")
    m.name = ""
    m.setField("nameText", m.namePlaceholderText)
  else
    m.setField("nameText", text)
    m.name = text
    m.setField("nameButtonType", "textInput")
  end if 
  
  m.checkCredsValid()
  
end function

private function onPasswordKeyboardDialogDismissal(text)
  m.logMethod("onPasswordKeyboardDialogDismissal")
  
  if text.trim() = ""
    m.setField("passwordText", m.passwordPlaceholderText)
    m.password = ""
    m.setField("passwordButtonType", "textInputPlaceholder")
    m.setField("passwordText", m.passwordPlaceholderText)
  else
    m.setField("passwordText", KeyboardDialogMixin.getHiddenPasswordText(text))
    m.password = text
    m.setField("passwordButtonType", "textInput")
  end if 
  
  m.checkCredsValid()
end function

private function onConfirmPasswordKeyboardDialogDismissal(text)
  m.logMethod("onConfirmPasswordKeyboardDialogDismissal")
  
  if text.trim() = ""
    m.setField("confirmPasswordText", m.confirmPasswordPlaceholderText)
    m.confirmPassword = ""
    m.setField("confirmPasswordButtonType", "textInputPlaceholder")
    m.setField("confirmPasswordText", m.confirmPasswordPlaceholderText)
  else
    m.setField("confirmPasswordText", KeyboardDialogMixin.getHiddenPasswordText(text))
    m.password = text
    m.setField("confirmPasswordButtonType", "textInput")
  end if 
  
  m.checkCredsValid()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ register
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function checkCredsValid()
  m.setField("isCredsValid", m.usernameText <> invalid and m.usernameText.trim() <> "" and m.password <> invalid and m.password.trim() <> "" and m.confirmPassword <> invalid and m.confirmPassword.trim() <> "" and m.nameText <> invalid and m.nameText.trim() <> "")
  
  m.setField("isRegisterButtonEnabled", m.isCredsValid and not m.isLoading)
end function

public function register()
  m.logInfo("registering")
  
  if m.isCredsValid
    creds = m.createInstance("AuthenticationCredentials")
    creds.name = m.nameText
    creds.username = m.usernameText
    creds.password = m.password
    creds.confirmPassword = m.confirmPassword
    m.authTask = m.createAuthTask("execRegister", m.providerId, "onRegisterComplete", creds)
    
    m.setField("isLoginButtonEnabled", false)
    
    m.setField("isLoading", true)
    m.setField("errorText", "")
    m.setField("isErrorShowing", false)
    m.setField("state", "loading")
  end if
end function

public function onRegisterComplete(result)
  m.logMethod("onRegisterComplete", result)
  
  if result <> invalid and result.state = "valid"
    m.logInfo("Register successful")
    m.setField("isDoneGroupVisible", true)
    m.setField("isMainGroupVisible", false)
    
  else
    m.setField("state", "ready")
    if result <> invalid and result.message <> invalid
      m.setField("errorText", result.message)
    else
      m.setField("errorText", "Unknown error")
    end if
    m.setField("isErrorShowing", true)
    m.setField("isLoginButtonEnabled", true)
  end if
  
  m.setField("isLoading", false)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ private
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'FIXME! hoist this into the base ViewModel in SDK 3.2
'it is duplicated form RegcodeLoginScreenVM


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Key Handling
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function isCapturingAnyKeyPress(key, press)
  'do not anyone escape this screen!
  if press and key = "back" and not MU.getContentField(m.riversJson, "general.isflowBlocker", true)
    return false
  else
    return true
  end if
end function

public function onKeyPressBack() as boolean
  m.logMethod("onKeyPressBack", m.focusId)
  
  m.dismiss("cancel")
  return true
end function

public function onKeyPressRight() as boolean
  
  if m.focusId = "loginButton" and m.riversJson.styles.debug_skip_on_right = true
    m.logWarn("skipping debug flag is on")
    m.onRegisterComplete(true)
  end if
  
  return false
end function

public function onKeyPressDown() as boolean
  m.logMethod("onKeyPressDown", m.focusId)
  
  m.setFocusId(MU.getItemAtOffset(m.focusIds, m.focusId, 1))
  
  return true
end function

public function onKeyPressOption() as boolean
  m.logMethod("onKeyPressOption", m.focusId)
  
  m.onUsernameKeyboardDialogDismissal(m.riversJson.styles.debug_username)
  m.onNameKeyboardDialogDismissal(m.riversJson.styles.debug_username)
  m.onPasswordKeyboardDialogDismissal(m.riversJson.styles.debug_password)
  m.onConfirmPasswordKeyboardDialogDismissal(m.riversJson.styles.debug_password)
  
  return true
end function

public override function onKeyPressUp() as boolean
  m.logMethod("onKeyPressUp", m.focusId)
  
  m.setFocusId(MU.getItemAtOffset(m.focusIds, m.focusId, - 1))
  
  return true
end function

end class
end namespace