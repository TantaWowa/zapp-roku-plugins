'@TestSuite [GAPT] GoogleAnalyticsPluginTests
namespace GAPT

'@BeforeEach
function beforeEach()
  config = {
    "tracking_id": "#t"
    "client_id": "#c"
    "user_id": "#u"
  }
  m.modelLocator = createObject("roSGNode", "ModelLocator")

  m.modelLocator.buildConfig = {"app_family_id": "#vid"}
  
  TU.setModelLocator(m.modelLocator)
  m.pluginData = new BasePlugin({ "configuration_json": config, "identifier": "google_analytics_roku" })
  m.plugin = new GoogleAnalyticsPlugin(m.pluginData)
end function

'@AfterEach
function afterEach()
  TU.unsetModelLocator()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests constructor
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test constructor
function constructor()
  m.assertEqual(m.plugin.id, "google_analytics_roku")
  m.assertSubType(m.plugin.task, "GoogleAnalyticsTask")
  m.assertEqual(m.plugin.task.trackingId, "#t")
  m.assertEqual(m.plugin.task.clientId, "#c")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests start
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test start
function start()
  
  task = { "id" : "task" }
  m.plugin.task = task
  
  m.expectOnce(m.plugin, "setInstance", ["googleAnalyticsTask", task])

  m.plugin.start()
  m.assertEqual(m.plugin.task.control, "run")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests identifyAsAnonymous
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function identifyAsAnonymous()
  m.expectOnce(m.plugin, "setGoogleTaskUserId", invalid)

  m.plugin.identifyAsAnonymous()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests is tracking user Id allowed
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test is user id allowed
'@Params["allow-tracking-user-id-for-app-family-aaaa","aaaa", true ]
'@Params["allow-tracking-user-id-for-app-familya-aaaa","aaaa", false ]
'@Params["allow-tracking-user-id-for-app-family-aaaa","aaaac", false ]
function isTrackingUserIdAllowed(userIdString, versionId, result)

  versionPrefix = "allow-tracking-user-id-for-app-family-"

  fResult = m.plugin.checkIfTrackingUserIdAllowed(userIdString, versionId)

  m.assertEqual(result, fResult)

end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests trackUserIdAllowedFlag
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@BeforeEach
function beforeEachTrackUserIdAllowedFlag()
  
end function

'@Test constructor_trackUser
'@Params[ "allow-tracking-user-id-for-app-family-aaaa", "aaaa", true ]
'@Params[ "allow-tracking-user-id-for-app-family-aaac", "aaaa", false ]
'@Params[ invalid, "aaaa", false ]
function trackUserIdAllowedFlag(userID, versionId, result)

  config = {
    "tracking_id": "#t"
    "client_id": "#c"
    "user_id": userID
  }
  m.modelLocator = createObject("roSGNode", "ModelLocator")

  m.modelLocator.buildConfig = {"app_family_id": versionId}
  
  TU.setModelLocator(m.modelLocator)
  m.pluginData = new BasePlugin({ "configuration_json": config, "identifier": "google_analytics_roku" })
  m.plugin = new GoogleAnalyticsPlugin(m.pluginData)

  m.assertEqual(m.plugin.isTrakingUserIdEnabled, result)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests setGoogleTaskUserId
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test valid
'@Params["user123", "user123" ]
'@Params["user 123", "user%20%123" ]
function setGoogleTaskUserId(userID, encodeUserId)
  params = {
      "uid": encodeUserId
  }

  m.plugin.setGoogleTaskUserId(userID)

  m.assertEqual(m.plugin.task.customSessionParams, params)
end function

'@Test return invalid
'@Params[invalid ]
'@Params[{} ]
'@Params[123 ]
function setGoogleTaskUserId_reutrn_invalid(userID)
  m.plugin.setGoogleTaskUserId(userID)

  m.assertEqual(m.plugin.task.customSessionParams, invalid)
end function
