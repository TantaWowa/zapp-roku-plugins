import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/plugin-support/BasePlugin.bs"
import "pkg:/source/plugin-support/PluginManager.bs"
import "pkg:/source/video/analytics/BaseVideoAnalyticsPlugin.bs"

class GoogleVideoAnalyticsPlugin extends zapp.video.BaseVideoAnalyticsPlugin

  @inject("analyticsManager")
  private analyticsManager
  private deviceInfo
  private videoHeight
  private videoResolution
  private countryISOMapping

  public function new()
    super("GoogleVideoAnalyticsPlugin")
    m.heartbeatInterval = 15
    m.deviceInfo = constants.deviceInfo
    m.videoHeight = m.deviceInfo.videoMode.left(len(m.deviceInfo.videoMode) - 1)
    m.videoResolution = m.getVideoResolution(m.videoHeight)
  end function

  public override function videoStart(videoNode, contentNode)
    super.videoStart(videoNode, contentNode)
    m.contentNode = contentNode

    m.postGoogleEvent("Video Content Started")
  end function

  public override function videoEnd()
    super.videoEnd()
    m.postGoogleEvent("Video Completed")
  end function

  public override function videoPause()
    super.videoPause()
    m.postGoogleEvent("Video Paused")
  end function

  public override function videoResume()
    super.videoResume()
    m.postGoogleEvent("Video Playback Resume")
  end function

  public override function videoContentStarted()
    m.postGoogleEvent("Video Content Started")
  end function

  public override function videoSeek(position)
    m.postGoogleEvent("Player Seek")
  end function

  public override function videoHeartbeat()
    super.videoHeartbeat()

    if m.isInAdBreak
      eventName = "Video Ad Playing (Heartbeat)"
    else
      eventName = "Video Heartbeat"
    end if

    m.postGoogleEvent(eventName)
  end function

  public override function adBreakStart()
    super.adBreakStart()
    m.postGoogleEvent("Video Ad Play")
  end function

  public override function adBreakEnd()
    super.adBreakEnd()
    m.postGoogleEvent("Video Ad Completed")
  end function

  public override function onSubtitleChange()
    super.onSubtitleChange()
    m.postGoogleEvent("Subtitle Language Changed")
  end function

  public override function onAudioChange()
    super.onAudioChange()
    m.postGoogleEvent("Audio Language Selected")
  end function

  private function getProperties(contentNode, action = invalid)
    'not available
    ' release_date_local_utc: "todo"
    ' event: "todo"
    ' months_since_release: "todo"
    ' days_since_release: "todo"
    ' page_hostname: "todo"
    ' page_type: "todo"
    ' language: "todo"
    ' nation: "todo"
    ' video_weeks_since_release: "todo"
    ' watch_time: "todo"


    if contentNode.LIVE = true
      videoType = "Live"
    else
      videoType = "VOD"
    end if

    if m.videoNode.duration <> 0
      progress = m.videoNode.position / m.videoNode.duration
      progress = int(progress * 100)
    else
      progress = 0
    end if

    properties = {
      audio_language: m.getAudioLanguage()
      content_title: contentNode.title
      height: str(m.videoNode.height).trim()
      resolution: m.videoResolution
      subtitle_language: m.getSubtitleLanguage()
      video_length: str(m.videoNode.duration).trim()
      video_progress: str(progress).trim() + "%"
      video_type: videoType
      width: str(m.videoNode.width).trim()
      cms_content_id: contentNode.id
    }

    if m.videoNode.streamInfo <> invalid
      properties.bitrate = m.videoNode.streamInfo.streamBitrate
    end if

    if action <> invalid
      properties.action = action
    end if

    return properties
  end function

  private function getAudioLanguage()
    tracks = m.videoNode.availableAudioTracks
    for each track in tracks
      ' m.log.info("track.Language", track.Language, " currentTrack ", m.videoNode.currentAudioTrack, " LANG ", track.Language)
      if track.Track = m.videoNode.currentAudioTrack
        return m.countryISOMapping[track.Language]
      end if
    end for

    return "en"
  end function

  private function getSubtitleLanguage()
    tracks = m.videoNode.availableSubtitleTracks
    for each track in tracks
      ' m.log.info("track.TrackName", track.TrackName, " currentTrack ", m.videoNode.currentSubtitleTrack, " LANG ", track.Language)
      if track.TrackName = m.videoNode.currentSubtitleTrack
        return m.countryISOMapping[track.Language]
      end if
    end for

    return "EN"
  end function

  public function postGoogleEvent(eventName)
    properties = m.getProperties(m.contentNode)
    properties.name = eventName
    m.analyticsManager@.trackUsingProvider("google_analytics_roku", eventName, properties)
  end function

  public override function onVideoAnalyticsEvent(event as zapp.video.VideoAnalyticsEvent)
    m.analyticsManager@.trackVideoEventUsingProvider("google_analytics_roku", event)
  end function


end class
