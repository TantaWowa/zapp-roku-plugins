namespace zapp.tests

  @only
  @nocatch
  @tags("public", "anaytics")
  @suite
  class GoogleAnalyticsPluginTests extends tests.BaseTestSuite

    protected override function beforeEach()
      super.beforeEach()
      config = {
        "tracking_id": "#t"
        "user_id": "#u"
      }
      mioc.setInstance("buildConfig", { "app_family_id": "#vid" })
      mioc.setInstance("constants", { "googleAnalyticsClientId": "#c" })

      m.pluginData = new zapp.BasePlugin({ "configuration_json": config, "identifier": "google_analytics_roku" })
      m.plugin = new GoogleAnalyticsPlugin(m.pluginData)
      m.plugin.task = { id: "task"}
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("constructor")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("constructor")
    function _()
      m.assertEqual(m.plugin.id, "google_analytics_roku")
      m.assertEqual(m.plugin.trackingId, "#t")
      m.assertEqual(m.plugin.clientId, "#c")

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("start")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates the task")
    function _()

      m.plugin.task.trackingId = "#t"
      m.plugin.task.clientId = "#c"

      task = { "id": "task" }

      factory = { "id": "factory" }
      m.expectOnce(m.plugin, "createInstance", ["AnalyticsEventFactory", invalid, "googleAnalyticsEventFactory"], factory)
      m.expectOnce(m.plugin, "createInstance", ["GoogleAnalyticsTask", invalid, "googleAnalyticsTask"], task)

      m.expectOnce(m.plugin, "setInstance", ["googleAnalyticsEventFactory", factory])
      m.expectOnce(m.plugin, "setInstance", ["googleAnalyticsTask", task])

      m.plugin.start()

      m.assertEqual(m.plugin.task.trackingId, "#t")
      m.assertEqual(m.plugin.task.clientId, "#c")
      m.assertEqual(m.plugin.task.control, "run")

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("identifyAsAnonymous")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("identifies as Anonymous")
    function _()
      m.expectOnce(m.plugin, "setGoogleTaskUserId", invalid)

      m.plugin.identifyAsAnonymous()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("is tracking user Id allowed")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("is user id allowed")
    @params("allow-tracking-user-id-for-app-family-aaaa", "aaaa", true)
    @params("allow-tracking-user-id-for-app-family-aaaa", "aaaa", false)
    @params("allow-tracking-user-id-for-app-family-aaaa", "aaaac", false)
    function _(userIdString, versionId, result)

      fResult = m.plugin.checkIfTrackingUserIdAllowed(userIdString, versionId)

      m.assertEqual(result, fResult)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("trackUserIdAllowedFlag")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("constructor_trackUser")
    @params("allow-tracking-user-id-for-app-family-aaaa", "aaaa", true)
    @params("allow-tracking-user-id-for-app-family-aaac", "aaaa", false)
    @params(invalid, "aaaa", false)
    function _(userID, versionId, result)

      config = {
        "tracking_id": "#t"
        "user_id": userID
      }
      mioc.setInstance("buildConfig", { "app_family_id": versionId })
      mioc.setInstance("constants", {})

      m.pluginData = new zapp.BasePlugin({ "configuration_json": config, "identifier": "google_analytics_roku" })
      m.plugin = new GoogleAnalyticsPlugin(m.pluginData)

      m.assertEqual(m.plugin.isTrakingUserIdEnabled, result)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("setGoogleTaskUserId")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("valid")
    @params("user123", "user123")
    @params("user 123", "user%20123")
    function _(userID, encodeUserId)
      params = {
        "uid": encodeUserId
      }

      m.plugin.setGoogleTaskUserId(userID)

      m.assertEqual(m.plugin.task.customSessionParams, params)
    end function

    @it("return invalid")
    @params(invalid)
    @params({})
    @params(123)
    function _(userID)
      m.plugin.setGoogleTaskUserId(userID)

      m.assertEqual(m.plugin.task.customSessionParams, invalid)
    end function

  end class
end namespace