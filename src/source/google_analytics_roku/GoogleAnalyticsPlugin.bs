import "pkg:/source/analytics/BaseAnalyticsPlugin.bs"
import "pkg:/source/video/analytics/VideoAnalyticsEvent.bs"
import "pkg:/source/video/analytics/VideoAnalyticsEvent.bs"

class GoogleAnalyticsPlugin extends zapp.Analytics.BaseAnalyticsPlugin

  private eventFactory = invalid
  private isTrackingUserIdEnabled = false
  private trackingId = false
  private clientId = false

  private analyticsPropertiesByGoogleKey = {
    "uuid": "TODO"
    "version": "TODO"
    "build_number": "TODO"
    "bundle_id": "TODO"
    "sdk_version": "TODO"
    "quickbrick_version": "TODO"
    "layout_id": "TODO"
    "name": "TODO"
    "media_id": "TODO"
    "duration": "TODO"
    "stream_type": "TODO"
    "media_type": "TODO"
    "player_type": "TODO"
    "downloaded": "TODO"
    ' "show_name":  "TODO"
    ' "season_name":  "TODO"
    ' "genre":  "TODO"
    ' "show type":  "TODO"
    ' "rating":  "TODO"
    ' "network":  "TODO"
    "stream_format": "TODO"
    "artist": "TODO"
    "album": "TODO"
    "label": "TODO"
    "author": "TODO"
    "station": "TODO"
    "publisher": "TODO"
    "start_time": "TODO"
    "position": "TODO"
    "total_ads": "TODO"
    "name": "TODO"
    "ad_id": "TODO"
    "position": "TODO"
    ' "advertiser":  "TODO"
    ' "campaign":  "TODO"
    "creative": "TODO"
    ' "placement":  "TODO"
    ' "site":  "TODO"
    ' "creative url":  "TODO"
    ' "ad_type":  "TODO"
    "system": "TODO"
    "ad_duration": "TODO"
    "current_position": "TODO"
  }

  public function new(plugin)
    super("GoogleAnalyticsPlugin", plugin)
    constants = m.getInstance("constants")

    m.trackingId = plugin.getStringValue("tracking_id")
    m.clientId = constants.googleAnalyticsClientId
    buildConfig = m.getInstance("buildConfig")
    versionId = buildConfig.app_family_id
    userIdString = plugin.getStringValue("user_id")

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ overridden methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function start()
    m.log.info("start")

    m.task = m.createInstance("GoogleAnalyticsTask", invalid, "googleAnalyticsTask")
    m.task.trackingId = trackingId
    m.task.clientId = clientId

    m.isTrackingUserIdEnabled = m.checkIfTrackingUserIdAllowed(userIdString, versionId)

    m.eventFactory = m.createInstance("AnalyticsEventFactory", invalid, "googleAnalyticsEventFactory")
    m.setInstance("googleAnalyticsEventFactory", m.eventFactory)
    m.setInstance("googleAnalyticsTask", m.task)
    m.task.control = "run"

  end function

  protected override function _identify(pluginId, traits = {}, options = {}, isFromLogout = false) as boolean
    m.log.info("identify", pluginId)

    if m.isEnabled

      if m.isTrackingUserIdEnabled <> true
        m.log.info("tracking user is not allowed skip isIdentified")
        return true
      end if

      if pluginId <> invalid
        accountInfo = m.getSessionStoreValue(pluginId, "account", true)
      else
        accountInfo = invalid
      end if

      m.log.info("identify accountInfo", accountInfo)

      if accountInfo <> invalid
        if accountInfo.id <> invalid and accountInfo.id.trim() <> ""
          m.log.info("identifying analytics with the userId", accountInfo.id, "for plugin:", pluginId)
          m.log.info("recrating GoogleAnalyticsTask with the userId", accountInfo.id, "for plugin:", pluginId)
          m.setGoogleTaskUserId(accountInfo.id)
        else
          m.log.error("identify called; but there id was empty!")
          m.identifyAsAnonymous()
        end if
      else
        m.log.warn("identify called; but there is no logged in user; point to unidentify, to get anonymous analytics")
        m.identifyAsAnonymous()
      end if
    end if

    return true
  end function

  private function identifyAsAnonymous()
    m.log.info("identifying as anonymous user")
    m.setGoogleTaskUserId(invalid)
  end function

  protected override function _trackVideoEvent(event as zapp.video.VideoAnalyticsEvent)
    m.log.info("sending video event ", event)

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' Use the Event for application state events, such as a login or registration.
    '
    ' | Parameter | Value Type  | Default Value | Max Length
    ' ------------------------------------------------------
    ' | category  | text        | None          | 150 Bytes
    ' | action    | text        | None          | 500 Bytes
    ' | label     | text        | None          | 500 Bytes
    ' | value     | text     | None          | None


    googleAnalytics.genericEvent = {
      category: "video"
      action: event.id
      label: event.name
      value: formatJson(m.getGoogleCompliantProperties(event))
    }
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private impl
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function getGoogleCompliantProperties(event as zapp.video.VideoAnalyticsEvent) as mc.types.assocarray
    properties = {

    }

    for each key in m.analyticsPropertiesByGoogleKey
      if event.properties.doesExist(key)
        properties[m.analyticsPropertiesByGoogleKey[key]] = event.properties[key]
      end if
    end for

    return properties
  end function

  private function checkIfTrackingUserIdAllowed(userIdString, versionId)

    prefix = "allow-tracking-user-id-for-app-family-"
    suffix = versionId
    s = userIdString

    if mc.isString(s) and mc.isString(prefix) and mc.isString(suffix)
      if prefix + suffix = s
        return true
      end if
    end if

    return false
  end function

  private function setGoogleTaskUserId(userId)
    if mc.isString(userId)
      m.task.customSessionParams = {
        "uid": Box(userId).Escape()
      }
    else
      m.task.customSessionParams = invalid
    end if
  end function

end class