namespace Applicaster.tests

  @suite
  class YouboraVideoAnalyticsTests extends Rooibos.BaseTestSuite

    override function beforeEach()
      ZC.AppService.clearClassInstances()

      m.config = {
        "account_code": "#ac"
        "is_debug": 1
        "task_name": "Node"
      }

      m.pluginData = new zapp.BasePlugin({ "configuration_json": m.config, "identifier": "youbora" })

      m.plugin = new YouboraVideoAnalytics(m.pluginData)
    end function

    override function afterEach()
      ZC.TestUtils.unsetModelLocator()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests videoStart")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("no task")
    @params({ "id" : "content", title: "t1"}, false)
    @params({ "id" : "content", title: "t2"}, false)
    @params({ "id" : "content", title: "t2", LIVE: false}, false)
    @params({ "id" : "content", title: "t2", LIVE: invalid}, false)
    @params({ "id" : "content", title: "t2", LIVE: true}, true)
    function _(content, expectedLive)
      videoNode = { "id": "videoNode" }
      task = { "id": "task" }
      m.plugin.taskName = "YBPluginRokuVideo"

      m.expectOnce(m.plugin, "getInstance", ["youboraAnalyticsTask"], invalid)
      m.expectOnce(m.plugin, "createInstance", ["YBPluginRokuVideo", videoNode, "youboraAnalyticsTask"], task)
      m.expectOnce(m.plugin, "setInstance", ["youboraAnalyticsTask", task])

      m.plugin.videoStart(videoNode, content)

      m.assertEqual(m.plugin.youboraTask, task)
      m.assertEqual(task.videoplayer, videoNode)
      m.assertEqual(task.control, "RUN")
      m.assertEqual(task.event, { handler: "play" })
      m.assertEqual(task.event, { handler: "play" })
      m.assertEqual(task.options.content.isLive, expectedLive)
      m.assertEqual(task.options.content.title, content.title)

    end function

    @it("task previously existed")
    @params({ "id" : "content", title: "t1"}, false)
    @params({ "id" : "content", title: "t2"}, false)
    @params({ "id" : "content", title: "t2", LIVE: false}, false)
    @params({ "id" : "content", title: "t2", LIVE: invalid}, false)
    @params({ "id" : "content", title: "t2", LIVE: true}, true)
    function _(content, expectedLive)
      videoNode = { "id": "videoNode" }
      task = { "id": "task" }
      m.plugin.config = { "isConfigSet": true }
      m.expectOnce(m.plugin, "getInstance", ["youboraAnalyticsTask"], task)
      m.expectNone(m.plugin, "createInstance")
      m.expectNone(m.plugin, "setInstance")

      m.plugin.videoStart(videoNode, content)

      m.assertEqual(m.plugin.youboraTask, task)
      m.assertEqual(task.event, { handler: "play" })
      m.assertEqual(task.options.content.isLive, expectedLive)
      m.assertEqual(task.options.content.title, content.title)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests videoEnd")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("invalid task does not crash")
    function _()
      m.plugin.videoEnd()
    end function

    @it("stopevent called on end")
    function _()
      m.plugin.youboraTask = { "id": "task" }

      m.plugin.videoEnd()

      m.assertEqual(m.plugin.youboraTask.event, { handler: "stop" })
      m.assertEqual(m.plugin.youboraTask.taskState, "stop")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests adTrackingEvent")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("no task")
    function _()
      m.plugin.adTrackingEvent("end", {})
    end function

    @it("task")
    function _()
      m.plugin.youboraTask = { "id": "task" }
      m.plugin.adTrackingEvent("end", { "id": "raf" })
      m.assertEqual(m.plugin.youboraTask.adevent, { "id": "raf" })
    end function

  end class
end namespace