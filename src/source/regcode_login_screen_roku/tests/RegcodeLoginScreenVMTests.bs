'@Only
'@TestSuite [RCLSVMT] RegcodeLoginScreenVM Tests
namespace Applicaster.Authentication.RegcodeLoginScreenVMTests

'@BeforeEach
function beforeEach()
  localStore = createObject("roSGNode", "ZSessionStore")
  modelLocator = createObject("roSGNode", "ModelLocator")
  modelLocator.addfields({ "ZPLocalStore": localStore })
  TU.setModelLocator(modelLocator)
  
  riversJson = {
    "id": "regcodeScreen"
    styles: {
    }
  }
  
  m.vm = new RegcodeLoginScreenVM(riversJson)
  m.analyticsManager = { "id" : "analyticsManager" }
  m.vm.analyticsManager = m.analyticsManager
  
  m.vm.initialize()
end function

'@AfterEach
function afterEach()
  m.global.delete("zapp")
  TU.unsetModelLocator()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests refreshLogin
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test
'@Params[invalid]
'@Params["id1"]
'@Params["id2"]
function refreshLogin(providerId)
  authTask = { "id" : "authTask" }
  
  m.expectOnce(m.vm, "createAuthTask", ["execLoad", providerId, "onRefreshLoginComplete"], authTask)
  m.vm.providerId = providerId
  
  m.vm.refreshLogin()
  
  m.assertEqual(m.vm.authTask, authTask)
  
  m.assertFalse(m.vm.isContentGroupVisible)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onRefreshLoginComplete
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test success
function onRefreshLoginComplete_success()
  user = { "id" : "user", isLoggedIn: true }
  m.expectOnce(m.vm, "getInstance", ["user"], user)
  
  m.vm.onRefreshLoginComplete({})
  
  m.assertFalse(m.vm.isShowingLoadingIndicator)
  m.assertEqual(m.vm.state, "success")
  
end function

'@Test not valid
function onRefreshLoginComplete_not_valid()
  user = { "id" : "user", isLoggedIn: false }
  m.expectOnce(m.vm, "getInstance", ["user"], user)
  
  m.vm.onRefreshLoginComplete({})
  
  m.assertFalse(m.vm.isShowingLoadingIndicator)
  m.assertNotEqual(m.vm.state, "success")
  m.assertTrue(m.vm.isContentGroupVisible)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onREfreshButtonSelected
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test 
function onRefreshButtonSelected()
  m.expectOnce(m.vm, "loadCode", [])
  m.vm.onRefreshButtonSelected(true)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onPollTimerFire
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test true
function onTimerFire_true()
  m.vm.authTask = { "id" : "authtask" }
  newAuthTask = { "id" : "newAuthTask" }
  m.vm.providerId = "pid"
  
  m.expectOnce(m.vm, "cancelTask", [m.vm.authTask])
  m.expectOnce(m.vm, "createAuthTask", ["execPoll", "pid", "onPollComplete"], newAuthTask)
  
  m.vm.onPollTimerFire(true)
  m.assertEqual(m.vm.authTask, newAuthTask)
end function

'@Test false
function onTimerFire_false()
  oldAuthTask = { "id" : "authtask" }
  m.vm.authTask = oldAuthTask
  m.vm.providerId = "pid"
  m.expectNone(m.vm, "cancelTask")
  m.expectNone(m.vm, "createAuthTask")
  
  m.vm.onPollTimerFire(false)
  m.assertEqual(m.vm.authTask, oldAuthTask)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests loadCode
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test 
function loadCode()
  oldAuthTask = { "id" : "authtask" }
  m.vm.authTask = oldAuthTask
  m.vm.providerId = "pid"
  newAuthTask = { "id" : "newAuthTask" }
  
  m.expectOnce(m.vm, "cancelTask", [m.vm.authTask])
  m.expectOnce(m.vm, "createAuthTask", ["execRegcode", "pid", "onLoadCodeComplete"], newAuthTask)
  
  m.vm.loadCode()
  
  m.assertEqual(m.vm.authTask, newAuthTask)
  m.assertTrue(m.vm.isRefreshing)
  m.assertTrue(m.vm.isShowingLoadingIndicator)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onLoadCodecomplete
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test success
function onLoadCodeComplete_success()
  result = { "regcode": "reg" }
  m.expectOnce(m.vm, "togglePollTimer", [true])
  
  m.vm.onLoadCodeComplete(result)
  
  m.assertEqual(m.vm.codeText, "reg")
  m.assertFalse(m.vm.isShowingLoadingIndicator)
  m.assertFalse(m.vm.isRefreshing)
end function

'@Test fail
'@Params[invalid]
'@Params[{}]
'@Params[{"codeText": invalid}]
function onLoadCodeComplete_fail(result)
  m.expectNone(m.vm, "togglePollTimer")
  
  m.vm.onLoadCodeComplete(result)
  
  m.assertEqual(m.vm.codeText, "")
  m.assertFalse(m.vm.isShowingLoadingIndicator)
  m.assertFalse(m.vm.isRefreshing)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests togglePollTimer
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test 
'@Params[true, "start"]
'@Params[false, "stop"]
function togglePollTimer(isActive, expectedValue)
  m.vm.togglePollTimer(isActive)
  m.assertEqual(m.vm.pollTimerControl, expectedValue)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onPollComplete
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test valid
function onPollComplete_valid()
  result = { "state" : "valid" }
  m.vm.providerId = "pid"
  m.expectOnce(m.vm.analyticsManager, "callFunc", ["identify", "pid"])
  m.expectOnce(m.vm.analyticsManager, "callFunc", ["trackEvent", "Login Succesful", "page_loaded", { "provider": "pid" }])
  m.expectOnce(m.vm, "dismiss", ["success"])
  
  m.vm.onPollComplete(result)
end function

'@Test fail
'@Params[invalid]
'@Params[{}]
'@Params[{"state":"error"}]
'@Params[{"state":"none"}]
function onPollComplete_fail(result)
  m.vm.providerId = "pid"
  m.expectNone(m.vm.analyticsManager, "callFunc")
  m.expectNone(m.vm, "dismiss" )
  m.expectOnce(m.vm, "togglePollTimer", [true])
  
  m.vm.onPollComplete(result)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onKeyPressBack
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test 
function onKeyPressBack()
  m.expectOnce(m.vm, "dismiss", ["cancel"])
  m.vm.onKeyPressBack()
  
end function

'TODO !!!
end namespace