'@TestSuite [RCLSVMT] RegcodeLoginScreenVM Tests
namespace Applicaster.Authentication.RegcodeLoginScreenVMTests

  '@BeforeEach
  function beforeEach()
    localStore = createObject("roSGNode", "ZSessionStore")
    m.modelLocator = {
      "ZPLocalStore": localStore
      "locale": "en"
    }
    TU.setModelLocator(m.modelLocator)

    riversJson = {
      "id": "regcodeScreen"
      styles: {
      }
      "localizations": { 
        "en": {} 
      }
    }

    m.vm = new RegcodeLoginScreenVM(riversJson)
    m.analyticsManager = { "id": "analyticsManager" }
    m.vm.analyticsManager = m.analyticsManager

    m.vm.initialize()
  end function

  '@AfterEach
  function afterEach()
    m.global.delete("zapp")
    TU.unsetModelLocator()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests load
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test displayedInPrehook not showing
  function load_displayedInPrehook_no_show()
    currentSelection = { "id": "currentSelection" }
    m.vm.providerId = "pid"
    m.vm.isDisplayedInPrehook = true

    m.expectOnce(m.vm, "getInstance", ["currentSelection"], currentSelection)
    m.expectOnce(m.vm, "shouldDisplayWithContent", [currentSelection], false)
    m.expectOnce(m.vm, "dismiss", ["success"])

    m.vm.load()
  end function

  '@Test displayedInPrehook showing
  function load_displayedInPrehook_showing()
    currentSelection = { "id": "currentSelection" }
    m.vm.providerId = "pid"
    m.vm.isDisplayedInPrehook = true

    m.expectOnce(m.vm, "getInstance", ["currentSelection"], currentSelection)
    m.expectOnce(m.vm, "shouldDisplayWithContent", [currentSelection], true)
    m.expectNone(m.vm, "dismiss")
    m.expectOnce(m.analyticsManager, "callFunc", ["trackEvent", "Waiting Page", "page_loaded", { "Provider": "pid" }])

    m.expectOnce(m.vm, "refreshLogin", [])

    m.vm.load()
  end function

  '@Test not displayedInPrehook
  function load_not_displayedInPrehook()
    currentSelection = { "id": "currentSelection" }
    m.vm.providerId = "pid"
    m.vm.isDisplayedInPrehook = false

    m.expectOnce(m.analyticsManager, "callFunc", ["trackEvent", "Waiting Page", "page_loaded", { "Provider": "pid" }])
    m.expectOnce(m.vm, "loadCode", [])

    m.vm.load()

    m.assertTrue(m.vm.isContentGroupVisible)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests shouldDisplayWithContent
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test
  '@Params[true]
  '@Params[false]
  function shouldDisplayWithContent(expected)
    currentItem = { "id": "currentItem" }
    currentSelection = { "id": "currentSelection", "currentItem": currentItem }
    entitlements = { "id": "entitlements" }
    m.expectOnce(m.vm, "getInstance", ["entitlements"], entitlements)
    m.expectOnce(entitlements, "callFunc", ["isLocked", currentItem], expected)

    m.assertEqual(m.vm.shouldDisplayWithContent(currentSelection), expected)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests refreshLogin
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test
  '@Params[invalid]
  '@Params["id1"]
  '@Params["id2"]
  function refreshLogin(providerId)
    authTask = { "id": "authTask" }

    m.expectOnce(m.vm, "createAuthTask", ["execLoad", providerId, "onRefreshLoginComplete"], authTask)
    m.vm.providerId = providerId

    m.vm.refreshLogin()

    m.assertEqual(m.vm.authTask, authTask)

    m.assertFalse(m.vm.isContentGroupVisible)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests onRefreshLoginComplete
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test success
  function onRefreshLoginComplete_success()
    user = { "id": "user", isLoggedIn: true }
    m.expectOnce(m.vm, "getInstance", ["user"], user)

    m.expectOnce(m.vm, "dismiss", ["success"])
    m.vm.onRefreshLoginComplete({})

    m.assertFalse(m.vm.isShowingLoadingIndicator)

  end function

  '@Test not valid
  function onRefreshLoginComplete_not_valid()
    user = { "id": "user", isLoggedIn: false }
    m.expectOnce(m.vm, "getInstance", ["user"], user)
    m.expectOnce(m.vm, "loadCode", [])
    m.expectNone(m.vm, "dismiss")

    m.vm.onRefreshLoginComplete({})

    m.assertFalse(m.vm.isShowingLoadingIndicator)
    m.assertTrue(m.vm.isContentGroupVisible)

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests onRefreshButtonSelected
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test 
  function onRefreshButtonSelected()
    m.expectOnce(m.vm, "loadCode", [])
    m.vm.onRefreshButtonSelected(true)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests onPollTimerFire
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test
  '@params[invalid]
  '@params[true]
  '@params[false]
  function onTimerFire_true(value)
    m.vm.authTask = { "id": "authtask" }
    newAuthTask = { "id": "newAuthTask" }
    m.vm.providerId = "pid"

    m.expectOnce(m.vm, "cancelTask", [m.vm.authTask])
    m.expectOnce(m.vm, "createAuthTask", ["execPoll", "pid", "onPollComplete"], newAuthTask)

    m.vm.onPollTimerFire(value)
    m.assertEqual(m.vm.authTask, newAuthTask)
  end function



  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests loadCode
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test 
  function loadCode()
    oldAuthTask = { "id": "authtask" }
    m.vm.authTask = oldAuthTask
    m.vm.providerId = "pid"
    newAuthTask = { "id": "newAuthTask" }

    m.expectOnce(m.vm, "cancelTask", [m.vm.authTask])
    m.expectOnce(m.vm, "createAuthTask", ["execRegcode", "pid", "onLoadCodeComplete"], newAuthTask)

    m.vm.loadCode()

    m.assertEqual(m.vm.authTask, newAuthTask)
    m.assertTrue(m.vm.isRefreshing)
    m.assertTrue(m.vm.isShowingLoadingIndicator)

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests onLoadCodecomplete
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test success
  function onLoadCodeComplete_success()
    result = { "regcode": "reg" }
    m.expectOnce(m.vm, "togglePollTimer", [true])

    m.vm.onLoadCodeComplete(result)

    m.assertEqual(m.vm.codeText, "reg")
    m.assertFalse(m.vm.isShowingLoadingIndicator)
    m.assertFalse(m.vm.isRefreshing)
  end function

  '@Test fail
  '@Params[invalid]
  '@Params[{}]
  '@Params[{"codeText": invalid}]
  function onLoadCodeComplete_fail(result)
    m.expectNone(m.vm, "togglePollTimer")

    m.vm.onLoadCodeComplete(result)

    m.assertEqual(m.vm.codeText, "")
    m.assertFalse(m.vm.isShowingLoadingIndicator)
    m.assertFalse(m.vm.isRefreshing)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests togglePollTimer
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test 
  '@Params[true, "start"]
  '@Params[false, "stop"]
  function togglePollTimer(isActive, expectedValue)
    m.vm.togglePollTimer(isActive)
    m.assertEqual(m.vm.pollTimerControl, expectedValue)

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests onPollComplete
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test valid
  function onPollComplete_valid()
    result = { "state": "valid" }
    m.vm.providerId = "pid"

    m.expectOnce(m.vm.analyticsManager, "callFunc", ["trackEvent", "Signed In", "page_loaded", { "provider": "pid" }])

    m.expectOnce(m.vm, "dismiss", ["success"])

    m.vm.onPollComplete(result)
  end function

  '@Test fail
  '@Params[invalid]
  '@Params[{}]
  '@Params[{"state":"error"}]
  '@Params[{"state":"none"}]
  function onPollComplete_fail(result)
    m.vm.providerId = "pid"
    m.expectNone(m.vm.analyticsManager, "callFunc")
    m.expectNone(m.vm, "dismiss")
    m.expectOnce(m.vm, "togglePollTimer", [true])

    m.vm.onPollComplete(result)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests onKeyPressBack
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test 
  function onKeyPressBack()
    m.expectOnce(m.vm, "dismiss", ["cancel"])
    m.vm.onKeyPressBack()

  end function

  'TODO !!!
end namespace