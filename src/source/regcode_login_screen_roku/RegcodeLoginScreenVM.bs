import "pkg:/source/UIBuilder/view/ZUIBScreenVM.bs"
import "pkg:/source/lib/ViewUtils.bs"
import "pkg:/source/plugin-support/BasePlugin.bs"
import "pkg:/source/plugin-support/PluginManager.bs"

namespace Applicaster.Authentication
class RegcodeLoginScreenVM extends ZUIBScreenVM

'styles
public isContentGroupVisible = false
public codeText = ""
public isShowingLoadingIndicator = true
public pollTimerControl = "stop"

private authTask = invalid
private analyticsManager = invalid 
private providerId = invalid
private refreshButtonOpacity = 1
public function new(riversJson)
  super(riversJson, "RegcodeLoginScreenVM")
  m.analyticsManager = m.getInstance("analyticsManager")
  
  m.focusId = "refreshButton"
  
  m.providerId = m.getAuthProviderId()
  
  if m.providerId = invalid
    m.isValid = false
    m.titleText = "No auth provider found. Make sure you have specified at least one auth provider"
    m.logError(titleText)
  end if

  if not MU.getContentField(riversJson, "styles.use_refresh_button", true)
    m.refreshButtonOpacity = 0
  end if
end function

private function getAuthProviderId()
  providerId = MU.getContentField(m.riversJson, "styles.provider_id", "")
  plugins = m.getClassInstance("PluginManager")
  
  authPlugin = invalid
  
  if providerId <> ""
    authPlugin = plugins.getPluginById(providerId)
  else
    authPlugins = plugins.getPluginsWithInterface("IAuthProvider")
    
    if authPlugins.count() > 0
      authPlugin = authPlugins[0]
    end if
  end if
  
  if authPlugin <> invalid
    return authPlugin.id
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Overridden
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

override public function createContent()
  m.logInfo("createContent is overridden in this screen")
end function

override public function load() as boolean
  currentSelection = m.getInstance("currentSelection")
  
  if m.isDisplayedInPrehook
    m.logInfo("displaying in prehook")
    
    if m.shouldDisplayWithContent(currentSelection)
      m.logInfo("Selected content is locked; need to login")
      m.analyticsManager@.trackEvent("Waiting Page", "page_loaded", { "Provider": m.providerId })
      m.refreshLogin()
    else
      m.dismiss("success")
    end if
  else
    m.logInfo("not displaying in prehook")
    m.analyticsManager@.trackEvent("Waiting Page", "page_loaded", { "Provider": m.providerId })
    m.setField("isContentGroupVisible", true)
    m.loadCode()
  end if
  
  return true
end function

private function shouldDisplayWithContent(currentSelection)
  
  url = MU.getContentField(currentSelection, "currentItem.url", "")
  isFree = MU.getContentField(currentSelection, "currentItem.free", false)
  isShowing = true
  
  if url.trim() = ""
    if isFree
      m.logInfo("this item is free; so even though it has no url, we are assuming a prehook other than this can resolve it's url correctly")
      isShowing = false
    else
      m.logInfo("item has no url, and is not free - we will show the screen, incase it is locked")
    end if
  else
    isShowing = false
  end if
  
  return isShowing
end function 

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ refresh
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

private function refreshLogin()
  m.logInfo("calling authTask to refresh login")
  
  m.authTask = m.createAuthTask("execLoad", m.providerId, "onRefreshLoginComplete")
  
  m.setField("isContentGroupVisible", false)
end function


private function onRefreshLoginComplete(result)
  m.logMethod("onRefreshLoginComplete", result)
  m.setField("isShowingLoadingIndicator", false)
  
  if m.getInstance("user").isLoggedIn
    m.dismiss("success")
  else
    m.setField("isContentGroupVisible", true)
    m.loadCode()
  end if
  
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ callbacks
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function onRefreshButtonSelected(value)
  m.logMethod("onRefreshButtonSelected")
  m.loadCode()
end function

public function onPollTimerFire(value)
  m.logMethod("onPollTimerFire")
  
  m.cancelTask(m.authTask)
  m.authTask = m.createAuthTask("execPoll", m.providerId, "onPollComplete")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Auth methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

private function loadCode()
  m.logMethod("loadCode")
  
  m.togglePollTimer(false)
  m.cancelTask(m.authTask)
  
  m.authTask = m.createAuthTask("execRegcode", m.providerId, "onLoadCodeComplete")
  
  m.setField("isRefreshing", true)
  m.setField("isShowingLoadingIndicator", true)
end function

private function onLoadCodeComplete(result)
  m.logMethod("onLoadCodeComplete")
  m.setField("isShowingLoadingIndicator", false)
  m.setField("isRefreshing", false)
  
  if result <> invalid and result.regcode <> invalid
    m.logInfo("received code", result.regcode)
    m.setField("codeText", result.regcode)
    m.togglePollTimer(true)
  else
    m.logWarn("received illegal code")
    m.setField("codeText", "")
  end if
  
end function

private function togglePollTimer(isActive)
  m.setField("pollTimerControl", "stop")
  
  if isActive
    m.setField("pollTimerControl", "start")
  end if
end function

private function onPollComplete(result)
  m.logMethod("onPollComplete")
  
  if result <> invalid and result.state = "valid"
    m.analyticsManager@.identify(m.providerId)
    m.analyticsManager@.trackEvent("Login Succesful", "page_loaded", { "provider": m.providerId })
    m.dismiss("success")
  else
    m.togglePollTimer(true)
  end if
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Key Handling
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function isCapturingAnyKeyPress(key, press)
  'do not anyone escape this screen!
  return true
end function

public function onKeyPressBack() as boolean
  m.dismiss("cancel")
  
  return true
end function

override public function onKeyPressUp() as boolean
  return true
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ lifecycle
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

end class
end namespace