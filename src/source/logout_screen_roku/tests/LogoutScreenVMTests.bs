'@TestSuite [LogoutSVMT] LogoutScreenVM Tests
namespace LogoutSVMT

'@BeforeEach
function beforeEach()
  m.modelLocator = {
    "User": { "isLoggedIn": false }
    "locale": "en"
  }
  TU.setModelLocator(m.modelLocator)

  m.riversJson = {
    "id": "logoutscreen"
    styles: {
      text_w: 300
      text_x: 20
      text_y: 600
      button_x: 700
      button_y: 400
      title_text: "are you sure"
      signed_out_text: "you are signed out"
  m.logout_button_text: "signe out"
      signed_out_button_text: "ok"
    }
  }
  
  m.vm = new LogoutScreenVM(m.riversJson)
  m.vm.initialize()
end function

'@AfterEach
function afterEach()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests constructor
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test constructor
function constructor()
  m.assertEqual(m.vm.riversJson, m.riversJson)
  m.assertEqual(m.vm.textPosition, [20, 600])
  m.assertEqual(m.vm.textWidth, 300)
  m.assertEqual(m.vm.buttonPosition, [700, 400])
  m.assertEqual(m.vm.titleText, "are you sure")
  m.assertEqual(m.vm.buttonText, "Sign out")
  m.assertEqual(m.vm.signedOutTitle, "you are signed out")
  m.assertEqual(m.vm.signedOutButtonText, "ok")
  
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onLogoutButtonSelected
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test not logged out yet
function onLogoutButtonSelected()
  m.expectOnce(m.vm, "logout", [])
  m.expectNone(m.vm, "restartApp")
  
  m.vm.onLogoutButtonSelected(true)
end function

'@Test logged out
function onLogoutButtonSelected_logged_out()
  m.vm.isLoggedOut = true
  
  m.expectNone(m.vm, "logout")
  m.expectOnce(m.vm, "restartApp", [])
  
  m.vm.onLogoutButtonSelected(true)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests logout
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test all providers 
function logout()
  authTask = { "id" : "authTask" }
  
  analyticsManager = { "id" : "analyticsManager" }
  m.expectOnce(analyticsManager, "callFunc", ["trackEvent", "Signed Out", "page_loaded", { "provider": "AdobeAccessEnabler" }])
  
  m.expectOnce(m.vm, "getSessionStoreValue", ["all_zapp_pipes_providers", "default_auth_plugin_id"], "AdobeAccessEnabler")
  
  m.expectOnce(m.vm, "getInstance", ["analyticsManager"], analyticsManager)
  
  m.expectOnce(m.vm, "createAuthTask", ["execLogOutAll", invalid, "onLogoutComplete"], authTask)

  m.vm.logout()
  
  m.assertEqual(m.vm.authTask, authTask)
  
  m.assertTrue(m.vm.isLoggedOut)
  m.assertTrue(m.vm.isShowingLoadingIndicator)
  m.assertFalse(m.vm.isButtonVisible)
end function

'@Test specific providers
'@Params["id1"]
'@Params["id2"]
function logout_specific_provider(providerId)
  authTask = { "id" : "authTask" }
  
  analyticsManager = { "id" : "analyticsManager" }
  m.expectOnce(analyticsManager, "callFunc", ["trackEvent", "Signed Out", "page_loaded", { "provider": providerId }])
  
  m.expectNone(m.vm, "getSessionStoreValue")
  
  m.expectOnce(m.vm, "getInstance", ["analyticsManager"], analyticsManager)
  
  m.expectOnce(m.vm, "createAUthTask", ["execLogOut", providerId, "onLogoutComplete"], authTask)
  m.vm.providerId = providerid

  m.vm.logout()
  
  m.assertEqual(m.vm.authTask, authTask)
  
  m.assertTrue(m.vm.isLoggedOut)
  m.assertTrue(m.vm.isShowingLoadingIndicator)
  m.assertFalse(m.vm.isButtonVisible)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onKeyPressBack
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test not signing out
function onKeyPressBack_not_signing_out()
  
  m.expectOnce(m.vm, "pop", [])
  m.vm.onKeyPressBack()
  
end function

'@Test signing out
function onKeyPressBack_signing_out()
  m.vm.isLoggedOut = true
  
  m.expectNone(m.vm, "pop")
  m.vm.onKeyPressBack()
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onLogoutCompplete
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


'@Test onLogoutComplete
function onLogoutComplete()
  
  m.vm.onLogoutComplete({ isOK: true })
  
  m.assertFalse(m.vm.isShowingLoadingIndicator)
  m.assertTrue(m.vm.isButtonVisible)
  m.assertEqual(m.vm.buttonText, "ok")
  m.assertEqual(m.vm.titleText, "you are signed out")
end function

end namespace