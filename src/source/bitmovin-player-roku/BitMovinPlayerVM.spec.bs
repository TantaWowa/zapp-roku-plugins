namespace Applicaster.Tests

  '@TestSuite
  class BitMovinPlayerVMTests extends Rooibos.BaseTestSuite

    override function beforeEach()
      m.modelLocator = CreateObject("roSGNode", "ModelLocator")
      m.modelLocator.collectionBookmarks = CreateObject("roSGNode", "Bookmarks")
      m.modelLocator.vodItemBookmarks = CreateObject("roSGNode", "Bookmarks")
      m.modelLocator.plugins = [] 
      m.modelLocator.locale = "en"
      m.BitmovinPlayerState = { "PLAYING": "playing", "STALLING": "stalling", "PAUSED": "paused", "FINISHED": "finished", "ERROR": "error", "NONE": "none", "SETUP": "setup", "READY": "ready" }


      m.BitmovinFields = { "PLAYER_STATE": "playerState", "ERROR": "error", "WARNING": "warning", "SEEK": "seek", "SEEKED": "seeked", "TIME_SHIFT": "timeShift", "TIME_SHIFTED": "timeShifted", "CURRENT_TIME": "currentTime", "SOURCE_LOADED": "sourceLoaded", "SOURCE_UNLOADED": "sourceUnloaded", "PLAY": "play", "METADATA": "metadata", "AUDIO_CHANGED": "audioChanged", "MUTED": "muted", "UNMUTED": "unmuted", "DOWNLOAD_FINISHED": "downloadFinished" }

      ZC.TestUtils.setModelLocator(m.modelLocator)

      m.selection = createObject("roSGNode", "Selection")

      m.riversJson = {
        "general": {
          "license_key": "lk"
          "override_video_url": "ourl"
        }
      }

      m.view = { "id": "#view", "isPlaybackFinished": false, "playbackResult": invalid, "riversJson": m.riversJson } 
      m.player = {
        "isPlayer": true
        "BitmovinFunctions": { "UNLOAD": "unload", "LOAD": "load", }
        "BitmovinFields": m.BitmovinFields
        "BitmovinPlayerState": m.BitmovinPlayerState
      } 

      m.vm = new BitMovinPlayerVM(m.view)
    end function

    override function afterEach()
      ZC.TestUtils.unsetModelLocator()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests constructor
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '@Test bad configured plugin
    '@Params[{}]
    '@Params[{"license_key": invalid }]
    '@Params[{"license_key": "" }]
    '@Params[{"license_key": "", }]
    '@Params[{"license_key": "", }]
    '@Params[{"license_key": "", "overrideVideoUrl": invalid }]
    '@Params[{"license_key": "", "overrideVideoUrl": "" }]
    '@Params[{"overrideVideoUrl": "" }]
    '@Params[{"overrideVideoUrl": "#override" }]
    function testConstructor_badConfiguredPlugin(generalJson)
      m.view.riversJson = { "general": generalJson }
      m.vm = new BitMovinPlayerVM(m.view)

      m.assertEqual(m.vm.state, "none")
      m.assertEqual(m.vm.view, m.view)
      m.assertEmpty(m.vm.licenseKey)
      m.assertEmpty(m.vm.overrideVideoUrl)
      m.assertFalse(m.vm.isValid)
    end function

    '@Test valid plugin
    function testConstructor_validPlugin()
      m.view.riversJson = { "general": {
          "license_key": "#key"
          "override_video_url": "#override"
        }
      }

      m.vm = new BitMovinPlayerVM(m.view)

      m.assertEqual(m.vm.state, "none")
      m.assertEqual(m.vm.view, m.view)
      m.assertEqual(m.vm.licenseKey, "#key")
      m.assertEqual(m.vm.overrideVideoUrl, "#override")

      m.assertTrue(m.vm.isValid)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests onSDKLoadStatusChange
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '@Test onLoadSDKStatusChange other states
    '@Params["none"]
    '@Params["notReady"]
    '@Params["error"]
    '@Params["loading"]
    function onLoadSDKStatusChange_otherStates(state)
      m.expectNone(m.view, "createChild")

      m.vm.onSDKLoadStatusChange(state) 

      m.assertInvalid(m.vm.player)
      m.assertInvalid(m.vm.playerFunctions)
      m.assertInvalid(m.vm.playerFields)
    end function

    '@Test onLoadSDKStatusChange ready
    function onLoadSDKStatusChange_ready()

      properties = MOM.createBindingProperties(false)
      m.vm.licenseKey = "#key"
      m.expectOnce(m.vm.view, "createChild", ["BitmovinPlayerSDK:BitmovinPlayer"], m.player)
      m.expectOnce(m.vm, "bindNodeField", [m.player, "playerState", "onPlayerStateChange", properties], m.player)
      m.expectOnce(m.vm, "bindNodeField", [m.player, "error", "onPlayerVideoError", properties])
      m.expectOnce(m.vm, "bindNodeField", [m.player, "currentTime", "onPlayerCurrentTimeChange", properties])
      m.expectOnce(m.vm, "bindNodeField", [m.player, "sourceLoaded", "onPlayerSourceLoadedChange", properties])

      m.expectOnce(m.player, "callFunc", [m.player.BitmovinFunctions.SETUP, {
          key: "#key"
      }])
      m.expectOnce(m.vm, "setVideoChromeStyle", [])

      m.vm.onSDKLoadStatusChange("ready") 

      m.assertEqual(m.vm.state, "ready")
      m.assertEqual(m.vm.player, m.player)
      m.assertEqual(m.vm.playerFields, m.player.BitmovinFields)
      m.assertEqual(m.vm.playerFunctions, m.player.BitmovinFunctions)
      m.assertEqual(m.vm.playerState, m.player.BitmovinPlayerState)
      m.assertEqual(m.vm.player.id, "player")

      m.assertTrue(m.vm.isValid)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests onPlayerStateChange
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '@Test onPlayerStateChange - other
    '@Params["stalling"]
    '@Params["paused"]
    '@Params["playing"]
    '@Params["none"]
    '@Params["setup"]
    function onPlayerStateChange(state)
      m.vm.playerState = m.BitmovinPlayerState
      m.vm.state = "playing"
      m.vm.player = m.player
      videoNode = { "id": "videoNode", "duration": 999 }

      m.expectOnce(m.vm.player, "getChild", [0], videoNode)

      m.vm.onPlayerStateChange(state)

      m.assertFalse(m.view.isPlaybackFinished)
      m.assertInvalid(m.view.playbackResult)
      m.assertEqual(m.vm.state, "playing")
      m.assertEqual(m.vm.view.duration, 999)
    end function

    '@Test onPlayerStateChange - other - no video node
    '@Params["stalling"]
    '@Params["paused"]
    '@Params["playing"]
    '@Params["none"]
    '@Params["setup"]
    function onPlayerStateChange_no_video_node(state)
      m.vm.playerState = m.BitmovinPlayerState
      m.vm.state = "playing"
      m.vm.player = m.player
      videoNode = invalid

      m.expectOnce(m.vm.player, "getChild", [0], videoNode)

      m.vm.onPlayerStateChange(state)

      m.assertFalse(m.view.isPlaybackFinished)
      m.assertInvalid(m.view.playbackResult)
      m.assertEqual(m.vm.state, "playing")
      m.assertEqual(m.vm.view.duration, 0)
    end function

    '@Test error
    function onPlayerStateChange_error()
      m.vm.playerState = m.BitmovinPlayerState
      m.vm.state = "playing"

      m.vm.onPlayerStateChange("error")

      m.assertTrue(m.view.isPlaybackFinished)
      m.assertEqual(m.view.playbackResult.state, "error")
      m.assertEqual(m.view.playbackResult.message, "error during playback")
      m.assertEqual(m.vm.state, "error")
    end function

    '@Test finished
    function onPlayerStateChange_finished()
      m.vm.playerState = m.BitmovinPlayerState
      m.vm.state = "playing"

      m.vm.onPlayerStateChange("finished")

      m.assertTrue(m.view.isPlaybackFinished)
      m.assertEqual(m.view.playbackResult.state, "finished")
      m.assertEmpty(m.view.playbackResult.message)
      m.assertEqual(m.vm.state, "ready")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests onPlayerVideoError
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '@Test onPlayerVideoError
    '@Params[{"message": "error1"}]
    '@Params[{"message": "error2"}]
    '@Params[{"message": "error3"}]
    function onPlayerVideoError(error)
      m.vm.onPlayerVideoError(error)
      m.assertEqual(m.view.playbackResult.state, "error")
      m.assertEqual(m.view.playbackResult.message, error.message)
      m.assertEqual(m.vm.state, "ready")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests onPlayerCurrentTimeChange
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '@Test onPlayerCurrentTimeChange
    '@Params[0]
    '@Params[100]
    '@Params[1000]
    function onPlayerCurrentTimeChange(time)
      m.vm.onPlayerCurrentTimeChange(time)
      m.assertEqual(m.view.position, time)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests playItem
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '@Test ready
    function playItem_ready()
      item = { "id": "a" }
      playerData = { "id": "playerData" }

      m.vm.state = "ready"
      m.vm.player = m.player
      m.expectOnce(m.vm, "getPlayerItem", [item], playerData)
      m.expectOnce(m.vm, "playBitmovinItem", [playerData])

      m.vm.playItem(item)
      m.assertInvalid(m.vm.pendingPlayerItem)

    end function

    '@Test not ready
    function playItem_not_ready()
      item = { "id": "a" }
      playerData = { "id": "playerData" }

      m.vm.state = "ready"
      m.vm.player = invalid
      m.vm.playerFunctions = m.player.BitmovinFunctions
      m.expectOnce(m.vm, "getPlayerItem", [item], playerData)
      m.expectNone(m.vm, "playBitmovinItem", [playerData])

      m.vm.playItem(item)
      m.assertEqual(m.vm.pendingPlayerItem, playerData)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests playBitmovinItem
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '@Test playBitmovinItem
    function playBitmovinItem()
      playerData = { "id": "playerData" }
      videoNode = { "id": "videoNode" }

      m.vm.state = "ready"
      m.vm.player = m.player
      m.vm.playerFunctions = m.player.BitmovinFunctions
      m.expectOnce(m.player, "getChild", [0], videoNode)

      m.expectOnce(m.vm, "setFocus", [m.player])
      m.expectOnce(m.vm, "setVideoChromeStyle", [])


      m.expectOnce(m.player, "callFunc", [m.player.BitmovinFunctions.LOAD, playerData])
      m.expectOnce(m.player, "callFunc", [m.player.BitmovinFunctions.PLAY, invalid])

      m.vm.playBitmovinItem(playerData)
      m.assertEqual(videoNode.control, "play")

      m.assertEqual(m.vm.state, "playing")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests stopItem
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    '@Test 
    function stopItem()
      m.vm.state = "playing"
      m.vm.player = m.player
      m.vm.playerFunctions = m.player.BitmovinFunctions
      m.expectOnce(m.vm.player, "callFunc", [m.player.BitmovinFunctions.UNLOAD, invalid])

      m.vm.stopItem()

      m.assertEqual(m.vm.state, "ready")
      m.assertTrue(m.vm.view.isPlaybackFinished)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '@It tests getPlayerData
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'TBD

  end class
end namespace