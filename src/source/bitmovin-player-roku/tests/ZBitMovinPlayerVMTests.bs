'@TestSuite ZBMPVMT ZBitMovinPlayerVMTests

namespace ZBMPVMT

'@BeforeEach
function BeforeEach()
  m.modelLocator = CreateObject("roSGNode", "ModelLocator")
  m.modelLocator.collectionBookmarks = CreateObject("roSGNode", "Bookmarks")
  m.modelLocator.vodItemBookmarks = CreateObject("roSGNode", "Bookmarks")
  m.modelLocator.plugins = [] 
  m.BitmovinPlayerState = { "PLAYING": "playing", "STALLING": "stalling", "PAUSED": "paused", "FINISHED": "finished", "ERROR": "error", "NONE": "none", "SETUP": "setup", "READY": "ready" }
  
  
  m.BitmovinFields = { "PLAYER_STATE": "playerState", "ERROR": "error", "WARNING": "warning", "SEEK": "seek", "SEEKED": "seeked", "TIME_SHIFT": "timeShift", "TIME_SHIFTED": "timeShifted", "CURRENT_TIME": "currentTime", "SOURCE_LOADED": "sourceLoaded", "SOURCE_UNLOADED": "sourceUnloaded", "PLAY": "play", "METADATA": "metadata", "AUDIO_CHANGED": "audioChanged", "MUTED": "muted", "UNMUTED": "unmuted", "DOWNLOAD_FINISHED": "downloadFinished" }
  
  TU.setModelLocator(m.modelLocator)
  
  m.selection = createObject("roSGNode", "Selection")
  
  m.selection.modelLocator = m.modelLocator
  m.view = { "id": "#view", "isPlaybackFinished": false, "playbackResult": invalid } 
  m.player = {
    "isPlayer": true
    "BitmovinFunctions": { "UNLOAD": "unload", "LOAD": "load", }
    "BitmovinFields": m.BitmovinFields
    "BitmovinPlayerState": m.BitmovinPlayerState
  } 
  
  m.vm = new ZBitMovinPlayerVM(m.view)
end function

'@AfterEach
function afterEach()
  TU.unsetmodelLocator()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests constructor
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test no plugin
function constructor_noPlugin()
  m.assertEqual(m.vm.state, "none")
  m.assertEqual(m.vm.view, m.view)
  m.assertEmpty(m.vm.licenseKey)
  m.assertEmpty(m.vm.overrideVideoUrl)
  m.assertFalse(m.vm.isValid)
end function

'@Test wrong plugin
function constructor_wrongPlugin()
  m.modelLocator.plugins = [PPMT_CreatePluginJson("wrong_plugin", {})] 
  
  m.assertEqual(m.vm.state, "none")
  m.assertEqual(m.vm.view, m.view)
  m.assertEmpty(m.vm.licenseKey)
  m.assertEmpty(m.vm.overrideVideoUrl)
  m.assertFalse(m.vm.isValid)
end function

'@Test bad configured plugin
'@Params[{}]
'@Params[{"license_key": invalid }]
'@Params[{"license_key": "" }]
'@Params[{"license_key": "", }]
'@Params[{"license_key": "", }]
'@Params[{"license_key": "", "overrideVideoUrl": invalid }]
'@Params[{"license_key": "", "overrideVideoUrl": "" }]
'@Params[{"overrideVideoUrl": "" }]
'@Params[{"overrideVideoUrl": "#override" }]
function constructor_badConfiguredPlugin(pluginJson)
  m.modelLocator.plugins = [PPMT_CreatePluginJson("tva-bitmovin-player-plugin-roku", pluginJson)] 
  
  m.vm = new ZBitMovinPlayerVM(m.view)
  
  m.assertEqual(m.vm.state, "none")
  m.assertEqual(m.vm.view, m.view)
  m.assertEmpty(m.vm.licenseKey)
  m.assertEmpty(m.vm.overrideVideoUrl)
  m.assertFalse(m.vm.isValid)
end function

'@Test valid plugin
function constructor_validPlugin()
  pluginJson = {
    "license_key": "#key"
    "override_video_url": "#override"
  }
  
  m.modelLocator.plugins = [PPMT_CreatePluginJson("bitmovin-player-roku", pluginJson)] 
  
  m.vm = new ZBitMovinPlayerVM(m.view)
  
  m.assertEqual(m.vm.state, "none")
  m.assertEqual(m.vm.view, m.view)
  m.assertEqual(m.vm.licenseKey, "#key")
  m.assertEqual(m.vm.overrideVideoUrl, "#override")
  
  m.assertTrue(m.vm.isValid)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onSDKLoadStatusChange
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test onLoadSDKStatusChange other states
'@Params["none"]
'@Params["notReady"]
'@Params["error"]
'@Params["loading"]
function onLoadSDKStatusChange_otherStates(state)
  m.expectNone(m.view, "createChild")
  
  m.vm.onSDKLoadSTatusChange(state) 
  
  m.assertInvalid(m.vm.player)
  m.assertInvalid(m.vm.playerFunctions)
  m.assertInvalid(m.vm.playerFields)
  
  m.assertFalse(m.vm.isValid)
end function

'@Test onLoadSDKStatusChange ready
function onLoadSDKStatusChange_ready()
  
  properties = MOM.createBindingProperties(false)
  m.vm.licenseKey = "#key"
  m.expectOnce(m.vm.view, "createChild", ["BitmovinPlayerSDK:BitmovinPlayer"], m.player)
  m.expectOnce(m.vm, "bindNodeField", [m.player, "playerState", "onPlayerStateChange", properties], m.player)
  m.expectOnce(m.vm, "bindNodeField", [m.player, "error", "onPlayerVideoError", properties])
  m.expectOnce(m.vm, "bindNodeField", [m.player, "currentTime", "onPlayerCurrentTimeChange", properties])
  
  m.expectOnce(m.player, "callFunc", [m.player.BitmovinFunctions.SETUP, {
    key:"#key"
  }])
  
  m.vm.onSDKLoadStatusChange("ready") 
  
  m.assertEqual(m.vm.state, "ready")
  m.assertEqual(m.vm.player, m.player)
  m.assertEqual(m.vm.playerFields, m.player.BitmovinFields)
  m.assertEqual(m.vm.playerFunctions, m.player.BitmovinFunctions)
  m.assertEqual(m.vm.playerState, m.player.BitmovinPlayerState)
  m.assertEqual(m.vm.player.id, "player")
  
  m.assertTrue(m.vm.isValid)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onPlayerStateChange
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test onPlayerStateChange - other
'@Params["stalling"]
'@Params["paused"]
'@Params["playing"]
'@Params["none"]
'@Params["setup"]
function onPlayerStateChange(state)
  m.vm.playerState = m.BitmovinPlayerState
  m.vm.state = "playing"
  
  m.vm.onPlayerStateChange(state)
  
  m.assertFalse(m.view.isPlaybackFinished)
  m.assertInvalid(m.view.playbackResult)
  m.assertEqual(m.vm.state, "playing")
end function

'@Test error
function onPlayerStateChange_error()
  m.vm.playerState = m.BitmovinPlayerState
  m.vm.state = "playing"
  
  m.vm.onPlayerStateChange("error")
  
  m.assertTrue(m.view.isPlaybackFinished)
  m.assertEqual(m.view.playbackResult.state, "error")
  m.assertEqual(m.view.playbackResult.message, "error during playback")
  m.assertEqual(m.vm.state, "ready")
end function

'@Test finished
function onPlayerStateChange_finished()
  m.vm.playerState = m.BitmovinPlayerState
  m.vm.state = "playing"
  
  m.vm.onPlayerStateChange("finished")
  
  m.assertTrue(m.view.isPlaybackFinished)
  m.assertEqual(m.view.playbackResult.state, "finished")
  m.assertEmpty(m.view.playbackResult.message)
  m.assertEqual(m.vm.state, "ready")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onPlayerVideoError
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test onPlayerVideoError
'@Params["error1"]
'@Params["error2"]
'@Params["error3"]
function onPlayerVideoError(error)
  m.vm.onPlayerVideoError(error)
  m.assertEqual(m.view.playbackResult.state, "error")
  m.assertEqual(m.view.playbackResult.message, error)
  m.assertEqual(m.vm.state, "ready")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onPlayerCurrentTimeChange
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test onPlayerCurrentTimeChange
'@Params[0]
'@Params[100]
'@Params[1000]
function onPlayerCurrentTimeChange(time)
  m.vm.onPlayerCurrentTimeChange(time)
  m.assertEqual(m.view.position, time)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests playItem
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test
function playItem()
  item = { "id": "a" }
  playerData = { "id" : "playerData" }
  
  m.vm.state = "ready"
  m.vm.player = m.player
  m.vm.playerFunctions = m.player.BitmovinFunctions
  m.expectOnce(m.vm, "getPlayerData", [item], playerData)
  m.expectOnce(m.vm.player, "callFunc", [m.player.BitmovinFunctions.LOAD, playerData])
  
  m.vm.playItem(item)
  
  m.assertEqual(m.vm.state, "playing")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests stopItem
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test 
function stopItem()
  m.vm.state = "playing"
  m.vm.player = m.player
  m.vm.playerFunctions = m.player.BitmovinFunctions
  m.expectOnce(m.vm.player, "callFunc", [m.player.BitmovinFunctions.UNLOAD, invalid])
  
  m.vm.stopItem()
  
  m.assertEqual(m.vm.state, "playing")
  m.assertTrue(m.vm.view.isPlaybackFinished)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests getPlayerData
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'TBD

end namespace