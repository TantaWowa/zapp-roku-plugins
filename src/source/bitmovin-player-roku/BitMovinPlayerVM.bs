import "pkg:/source/zapp/BaseZappVM.bs"
import "pkg:/source/plugin-support/PluginManager.bs"
import "pkg:/source/lib/ViewUtils.bs"

class BitMovinPlayerVM extends zapp.BaseZappVM

  private view = invalid
  private themeColor = "#ffffff"
  private player = invalid
  private currentItem = invalid
  private licenseKey = ""
  private overrideVideoUrl = ""
  private isValid = false
  private pendingPlayerItem = invalid
  private playMode = "default"

  private bitmovinPlayerSDK
  private playerFunctions
  private playerFields
  private playerState

  public function new(view)
    super("BitMovinPlayerVM")
    m.view = view

    m.licenseKey = mc.getPath(view.riversJson, "general.license_key", "")
    m.overrideVideoUrl = mc.getPath(view.riversJson, "general.override_video_url", "")
    themeColor = mc.getPath(view.riversJson, "styles.theme_color")

    if themeColor = invalid
      m.themeColor = "#ffffff"
    else
      m.themeColor = zapp.viewUtils.transposeUIBColor(themeColor)
    end if

    m.isValid = m.licenseKey <> ""
  end function

  private function _initialize()
    m.createPlayer()
  end function

  private function createPlayer()
    m.state = "creatingPlayer"
    m.bitmovinPlayerSDK = m.view.createChild("ComponentLibrary")
    m.bitmovinPlayerSDK.id = "BitmovinPlayerSDK"
    m.bitmovinPlayerSDK.uri = "https://cdn.bitmovin.com/player/roku/1.22.0/bitmovinplayer.zip"
    ' Adding the ComponentLibrary node to the scene will start the download of the library
    m.view.appendChild(m.bitmovinPlayerSDK)
    m.observeNodeField(m.bitmovinPlayerSDK, "loadStatus", m.onSDKLoadStatusChange)
  end function

  private function onSDKLoadStatusChange(status)
    m.log.info("sdk status is now", status)

    if status = "ready"
      m.state = "ready"
      m.log.info("creating player")
      m.player = m.view.createChild("BitmovinPlayerSDK:BitmovinPlayer")
      m.player.id = "player"

      m.playerFunctions = m.player.BitmovinFunctions
      m.playerFields = m.player.BitmovinFields
      m.playerState = m.player.BitmovinPlayerState
      m.setVideoChromeStyle()
      m.observeNodeField(m.player, m.playerFields.PLAYER_STATE, m.onPlayerStateChange)
      m.observeNodeField(m.player, m.playerFields.ERROR, m.onPlayerVideoError)
      m.observeNodeField(m.player, m.playerFields.CURRENT_TIME, m.onPlayerCurrentTimeChange)
      ' m.observeNodeField(m.player, m.playerFields.SOURCE_LOADED, m.onPlayerSourceLoadedChange)
      ' m.observeNodeField(m.playerFields.SEEK, m.onPlayerSeek)
      ' m.observeNodeField(m.playerFields.SEEKED, m.onPlayerSeeked)
      m.player.callFunc(m.playerFunctions.SETUP, {
        key: m.licenseKey
      })
      if m.pendingPlayerItem <> invalid
        m.log.info("there was an item pending to play, playing it now")
        m.playBitmovinItem(m.pendingPlayerItem)
        m.pendingPlayerItem = invalid
      end if
    end if
  end function

  private function setVideoChromeStyle()
    videoNode = m.player.getChild(0)
    videoNode.retrievingBar.filledBarBlendColor = m.themeColor
    videoNode.bufferingBar.filledBarBlendColor = m.themeColor
    videoNode.trickPlayBar.filledBarBlendColor = m.themeColor
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Public api
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function playItem(item, playMode = "default")
    m.log.method("playItem ", item.id)

    m.currentItem = item
    m.playMode = playMode
    playerItem = m.getPlayerItem(m.currentItem)
    playerItem.options = {
      "startOffset": m.currentItem.PlayStart
    }
    m.log.info("playing with player item", formatJson(playerItem))

    if m.player <> invalid
      m.pendingPlayerItem = invalid
      m.playBitmovinItem(playerItem)
    else
      m.log.warn("player is not ready yet; settig this item as pending")
      m.pendingPlayerItem = playerItem
    end if
  end function

  function playBitmovinItem(playerItem)
    m.log.method("playBitmovinItem")

    m.state = "playing"
    m.player.callFunc(m.playerFunctions.LOAD, playerItem)
    m.player.callFunc(m.playerFunctions.PLAY, invalid)
    videoNode = m.player.getChild(0)
    videoNode.control = "play"
    if m.playMode = "default"
      m.setFocus(m.player)
    end if
    m.setVideoChromeStyle()
  end function

  public function getPlayerItem(item)

    if item.playbackData <> invalid
      return item.playbackData

    else
      return {
        hls: item.url
        title: item.title
      }
    end if
  end function

  public function stopItem()
    m.log.method("stopItem")
    if m.player <> invalid
      m.player.callFunc(m.playerFunctions.UNLOAD, invalid)
    end if
    m.pendingPlayerItem = invalid
    m.currentItem = invalid
    m.view.isPlaybackFinished = true
    m.state = "ready"
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Player callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onPlayerStateChange(state) as void
    m.log.info("player state change", state)

    if state = m.playerState.FINISHED
      m.view.playbackResult = m.makeResult("finished", "")
      m.view.isPlaybackFinished = true
      m.state = "ready"
    else if state = m.playerState.ERROR
      m.view.playbackResult = m.makeResult("error", "error during playback")
      m.view.isPlaybackFinished = true
      m.state = "error"
    else
      'ignore this state ; but check if we'v got a duration yet
      videoNode = m.player.getChild(0)

      if videoNode <> invalid
        m.view.duration = videoNode.duration
      else
        m.view.duration = 0
      end if
    end if
  end function

  private function onPlayerVideoError(error)
    m.log.method("onPlayVideoError", error)
    m.view.playbackResult = m.makeResult("error", error.message)
    m.state = "ready"
  end function

  private function onPlayerCurrentTimeChange(currentTime)
    m.view.position = currentTime
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private impl
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function makeResult(state, message)
    return { "state": state, "message": message }
  end function

  override function destroy()
    'video player is never destroyed
  end function

end class
