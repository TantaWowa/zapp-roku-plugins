import "pkg:/source/UIBuilder/view/ScreenVM.bs"
import "pkg:/source/lib/ViewUtils.bs"

class WarningMessageScreenVM extends zuib.ScreenVM

  'styles
  public isContentGroupVisible = false
  public titleStyle = invalid
  public descriptionStyle = invalid
  public optional1Style = invalid
  public titleText = ""
  public descriptionText = ""
  public optional1Text = ""
  public doneButtonStyle = invalid
  public isShowingLoadingIndicator = true

  public backgroundColor = "#000000ff"
  public backgroundUrl = ""
  public textPosition = [0, 310]
  public buttonPosition = [655, 688]
  public logoPosition = [100, 33]
  public logoWidth = 350
  public logoHeight = 100
  public logoImageUrl = ""

  private warningEntryIndex = -1
  private warningEntryDepth = 1
  private conditionPath = ""
  private conditionValue = ""
  private warningType = "entry"

  public function new(riversJson)
    super(riversJson, "WarningMessageScreenVM")

    m.focusId = "usernameInput"
    m.conditionPath = m.riversJson.styles.condition_path
    m.conditionValue = m.riversJson.styles.condition_value
    m.processStyles(m.riversJson.styles)

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Overridden
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function createContent()
    m.logInfo("createContent is overridden in this screen")
  end function

  public override function load() as boolean
    isShowingWarning = false

    if m.originEntry <> invalid and mc.isString(m.conditionPath) and mc.isString(m.conditionValue) 
      value = mc.getContentField(m.originEntry.json, m.conditionPath, invalid)

      if mc.isString(value) and lcase(value) = lcase(m.conditionValue)
        m.logInfo("this content has a value that matches the locking condition")
        isShowingWarning = true

        if m.warningType = "entry"
          m.logInfo("loading entry to display")
          super.load()
        else
          m.logInfo("showig static message")
          m.showGenericErrorMessage()
        end if
      end if

    end if

    if not isShowingWarning
      m.logInfo("this content does NOT match the locking condition continuing with flow")
      m.dismiss("success")
    end if

    return true
  end function

  public override function onFeedResult(result)
    m.logMethod("onFeedResult")
    'now load the child with the entry that's going to display the message
    warningEntry = invalid

    if result.isOk and result.data.itemType <> "problemDetailsResponse" and result.data.getChildCount() > m.warningEntryIndex
      m.warningEntryIndex = -1

      if m.warningEntryIndex = -1
        warningEntry = result.data.getChild(result.data.getChildCount() - 1)
      else
        warningEntry = result.data.getChild(m.warningEntryIndex)
      end if
      if warningEntry <> invalid
        m.logInfo("loading required entry to display mesage", warningEntry.id)
        m.executeLoadItemTask(warningEntry.id, warningEntry, "onLoadedChildEntry", 0)
      end if
    end if

    if warningEntry = invalid
      m.showGenericErrorMessage()
    end if
  end function

  private function onLoadedChildEntry(result)
    m.logMethod("onLoadedChildEntry", result)

    messageEntry = invalid

    if result.isOk and result.data.itemType <> "problemDetailsResponse"
      messageEntry = mc.getChildAtDepth(result.data, m.warningEntryDepth)
    end if

    if messageEntry <> invalid
      m.showMessage(messageEntry)
    else
      m.showGenericErrorMessage()
    end if
  end function

  private function showGenericErrorMessage()
    m.setField("isShowingLoadingIndicator", false)

    'this is already showing by default
  end function

  private function showMessage(entry)
    m.setField("isContentGroupVisible", true)
    m.setField("isShowingLoadingIndicator", false)

    titleText = mc.getContentField(entry.json, "title", "")

    if titleText = ""
      titleText = "This content cannot be displayed"
    end if

    m.setField("titleText", titleText)

    m.setField("descriptionText", mc.getContentField(entry.json, "description", ""))
    m.setField("optional1Text", mc.getContentField(entry.json, "extensions.extra_text", ""))
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ styles
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function processStyles(styles)
    m.logInfo("converting rivers json styles into a format our UI controls can consume")

    m.titleStyle = zc.ViewUtils.makeUIBTextStyle(styles, "title")

    m.descriptionStyle = zc.ViewUtils.makeUIBTextStyle(styles, "description")
    m.optional1Style = zc.ViewUtils.makeUIBTextStyle(styles, "optional_text1")
    m.backgroundColor = zc.ViewUtils.transposeUIBColor(styles.background_color)
    m.backgroundUrl = styles.background_url
    m.logoImageUrl = styles.logo_image_url

    m.doneButtonStyle = zc.ViewUtils.makeUIBButtonStyle(styles, "done_button", "custom", styles.done_button_text)

    m.logoImageUrl = styles.logo_url
    m.logoPosition = zc.ViewUtils.makeUIBPosition(styles, "logo", 100, 33)
    m.textPosition = zc.ViewUtils.makeUIBPosition(styles, "text", 0, 310)
    m.textWidth = zc.ViewUtils.getUIBInt(styles, "text_w", 1920)
    m.buttonPosition = zc.ViewUtils.makeUIBPosition(styles, "button", 100, 33)
    logoSize = zc.ViewUtils.makeUIBSize(styles, "logo", 350, 100)
    m.logoWidth = logoSize[0]
    m.logoHeight = logoSize[1]

    m.warningType = mc.getContentField(styles, "warning_type", "entry")
    m.warningEntryIndex = zc.ViewUtils.getUIBInt(styles, "entry_index", -1)
    m.warningEntryDepth = zc.ViewUtils.getUIBInt(styles, "entry_depth", 1)

    m.warningType = mc.getContentField(styles, "warning_type", "entry")
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function onDoneButtonSelected(value)
    m.logMethod("onDoneButtonSelected")
    m.dismiss("cancel")
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Handling
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function isCapturingAnyKeyPress(key, press)
    'do not anyone escape this screen!
    return true
  end function

  public function onKeyPressBack() as boolean
    m.dismiss("cancel")
    return true
  end function

  public override function onKeyPressUp() as boolean
    return true
  end function

end class
