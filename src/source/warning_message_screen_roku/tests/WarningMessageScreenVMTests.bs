'@TestSuite [WMSVMT] WarningMessageScreenVM Tests
namespace WMSVMT

  '@BeforeEach
  function beforeEach()
    localStore = createObject("roSGNode", "ZSessionStore")
    modelLocator = createObject("roSGNode", "ModelLocator")
    modelLocator.addfields({ "ZPLocalStore": localStore })
    TU.setModelLocator(modelLocator)

    riversJson = {
      "id": "warningScreen"
      styles: {
        condition_path: ""
        condition_value: ""
      }
    }

    m.vm = new WarningMessageScreenVM(riversJson)
    m.analyticsManager = { "id": "analyticsManager" }
    m.vm.analyticsManager = m.analyticsManager

    m.vm.initialize()
  end function

  '@AfterEach
  function afterEach()
    m.global.delete("zapp")
    TU.unsetModelLocator()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests load
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test matching conditions
  '@Params[{field:"v" }, "field", "v"]
  '@Params[{json{field:"v2"} }, "json.field", "v2"]
  '@Params[{json{field:"v2 "} }, "json.field", "v2"]
  '@Params[{json{field:"v2 "} }, "json.field", "v2 "]
  '@Params[{json{field:"v2 "} }, "json.field", "V2 "]
  '@Params[{field:"v", }, "field", "V"]
  function load_matching(entry, path, condition)
    m.vm.conditionPath = path
    m.vm.conditionValue = condition
    m.expectOnce(m.vm, "load_ComponentVM")
    m.expectNone(m.vm, "dismiss")
    m.vm.originEntry = entry

    m.vm.load() 

    m.assertNotEqual(m.vm.state, "success")

  end function

  '@Test no entry
  function load_no_entry()
    m.expectNone(m.vm, "CVM_load")
    m.expectOnce(m.vm, "dismiss", ["success"])

    m.vm.originEntry = invalid

    m.vm.load() 

  end function

  '@Test not matching conditions
  '@Params[{field:"", }, "field", "v"]
  '@Params[{field:"v", }, "field", ""]
  '@Params[{json{field:"v2"}, }, "json.field", "n2"]
  '@Params[{json{field:"v2 "}, }, "json.field", "n2"]
  '@Params[{json{field:"v2 "}, }, "json.field", "n2 "]
  '@Params[{json{field:"v2"}, }, "", "v2"]
  '@Params[{json{field:"v2"}, }, " ", "v2"]
  '@Params[{json{field:"v2"}, }, "json.field", ""]
  '@Params[{json{field:"v2"}, }, "json.field", " "]
  function load_not_matching(entry, path, condition)
    m.vm.conditionPath = path
    m.vm.conditionValue = condition
    m.expectNone(m.vm, "CVM_load")
    m.expectOnce(m.vm, "dismiss", ["success"])
    m.vm.originEntry = entry

    m.vm.load() 

  end function


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests onDoneButtonSelected
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test 
  function onDoneButtonSelected()
    m.expectOnce(m.vm, "dismiss", ["cancel"])

    m.vm.onDoneButtonSelected(true)

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests onKeyPressBack
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  '@Test 
  function onKeyPressBack()
    m.expectOnce(m.vm, "dismiss", ["cancel"])

    m.vm.onKeyPressBack()

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '@It tests showMessage
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


  '@Test showMessage
  function showMessage()
    entry = { "id": "entry"
      title: "#t"
      description: "#d"
      extensions: {
        extra_text: "#e"
      }
    }

    m.vm.showMessage(entry)
    m.assertFalse(m.vm.isShowingLoadingIndicator)
    m.assertTrue(m.vm.isContentGroupVisible)

    m.assertEqual(m.vm.titleText, "#t")
    m.assertEqual(m.vm.descriptionText, "#d")
    m.assertEqual(m.vm.optional1Text, "#e")

  end function
end namespace