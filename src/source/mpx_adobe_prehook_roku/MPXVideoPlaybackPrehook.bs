import "pkg:/source/plugin-support/PluginManager.bs"
import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/lib/Request.bs"
import "pkg:/source/lib/URI.bs"

' /**
'  * @module MPXVideoPlaybackPrehook
'  * @description appends the content url from mpx, using adobe shortmedia token
'  */
class MPXVideoPlaybackPrehook extends zapp.BaseClass

  public isValid = false
  private matchingPath = ""
  private matchingValue = ""

  @injectClass("zapp.PluginManager")
  private plugins

  @injectClass("zapp.Request")
  private request

  @injectClass("zapp.URI")
  private uri

  public function new()
    super("MPXVideoPlaybackPrehook")

    plugin = m.plugins.getPluginById("mpx_video_playback_prehook_roku")
    m.isValid = plugin.isValid

    if plugin.isValid
      m.matchingPath = plugin.getStringValue("matching_path", "")
      m.matchingValue = plugin.getStringValue("matching_value", "")
    else
      m.log.error("There was no plugin config!")
      m.matchingPath = ""
      m.matchingValue = ""
    end if
  end function

  public function execute()
    item = mc.getPath(m.getInstance("currentSelection"), "currentItem")

    if item = invalid
      m.log.error("no item - this plugin requires currentSelection.currentItem is populated")
      return "error"
    end if

    if not m.isItemMatch(item)
      m.log.error("item does not match")
      return "success"
    end if

    if m.loadMPXURL(item)
      return "success"
    else
      return "error"
    end if
  end function

  function isItemMatch(item)
    if m.matchingPath = "all"
      return true
    end if

    value = mc.getPath(item.json, m.matchingPath, invalid)
    if not mc.isString(value)
      value = formatJson(value)
    end if
    return value = m.matchingValue
  end function

  private function loadMPXUrl(item)
    shortMediaToken = m.getSessionStoreValue("tve", "short-token")

    if shortMediaToken = invalid
      m.log.error("there was no short media token for this item.")
      return false
    end if

    params = {
      "apt": shortMediaToken
      "format": "smil"
      "formats": "M3U,MPEG4"
    }

    'FIXME
    url = item.link + "?" + m.uri.encodeParams(params)
    result = m.getXMLSync(url)
    m.log.info("got result", result)
    'what a monstrosity - this will be so much better when we have try/catch
    if result <> invalid and result.body <> invalid and result.body.seq <> invalid
      if result.body.seq.switch <> invalid and result.body.seq.switch.count() > 0 and result.body.seq.switch[0] <> invalid and result.body.seq.switch[0].video <> invalid
        item.url = result.body.seq.switch[0].video@src
        item.isLoaded = true
        return true
      else if result.body.seq.par <> invalid and result.body.seq.par.switch <> invalid and result.body.seq.par.switch.count() > 0 and result.body.seq.par.switch[0] <> invalid and result.body.seq.par.switch[0].video <> invalid
        item.url = result.body.seq.par.switch[0].video@src
        item.isLoaded = true
        return true
      end if
    end if

    m.log.error("MPX result did not yield any playable streams")
    return false
  end function

  public function getXMLSync(url)
    result = m.request.getSync(url)

    if result <> invalid and result <> ""
      xml = CreateObject("roXMLElement")
      if xml.Parse(result)
        return xml
      end if
    end if

    m.log.error("result could not be parsed")
    return invalid
  end function


end class
