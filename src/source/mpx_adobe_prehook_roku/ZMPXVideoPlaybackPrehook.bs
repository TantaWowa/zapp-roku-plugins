import "pkg:/source/plugin-support/PluginManager.bs"
import "pkg:/source/lib/ZBaseClass.bs"
import "pkg:/source/maestro/lib/Utils.bs"
import "pkg:/source/lib/request.bs" 
import "pkg:/source/lib/uri.bs" 

namespace Applicaster

' /**
'  * @module ZMPXVideoPlaybackPrehook
'  * @description appends the content url from mpx, using adobe shortmedia token
'  */
class ZMPXVideoPlaybackPrehook extends ZBaseClass

public isValid = false
private matchingPath = ""
private matchingValue = ""
private request = invalid
private uri = invalid

public function new()
  m.super("ZMPXVideoPlaybackPrehook")
  m.plugins = m.getClassInstance("PluginManager")
  
  plugin = m.plugins.getPluginById("mpx_video_playback_prehook_roku")
  m.isValid = plugin.isValid
  
  if plugin.isValid
    m.matchingPath = plugin.getStringValue("matching_path", "")
    m.matchingValue = plugin.getStringValue("matching_value", "")
  else
    m.logError("There was no plugin config!")
    m.matchingPath = ""
    m.matchingValue = ""
  end if
  
  m.request = m.getClassInstance("RequestModule")
  m.uri = m.getClassInstance("UriModule")
  
  
end function

public function execute()
  item = MU.getContentField(m.getInstance("currentSelection"), "currentItem")
  
  if item = invalid
    m.logError("no item - this plugin requires currentSelection.currentItem is populated")
    return "error"
  end if
  
  if not m.isItemMatch(item)
    m.logError("item does not match")
    return "success"
  end if
  
  if m.loadMPXURL(item)
    return "success"
  else
    return "error"
  end if
end function

function isItemMatch(item)
  if m.matchingPath = "all"
    return true
  end if
  
  value = MU.getContentField(item.json, m.matchingPath, invalid)
  if not MU.isString(value)
    value = formatJson(value)
  end if
  return value = m.matchingValue
end function

private function loadMPXUrl(item)
  shortMediaToken = m.getSessionStoreValue("tve", "short-token")
  
  if shortMediaToken = invalid
    m.logError("there was no short media token for this item.")
    return false
  end if
  
  params = {
    "apt": shortMediaToken
    "format": "smil"
    "formats": "M3U,MPEG4"
  }
  
  url = item.link + "?" + m.uri.encodeParams(params)
  result = m.getXMLSync(url)
  m.logInfo("got result", result)
  'what a monstrosity - this will be so much better when we have try/catch
  if result <> invalid and result.body <> invalid and result.body.seq <> invalid 
    if result.body.seq.switch <> invalid and result.body.seq.switch.count() > 0 and result.body.seq.switch[0] <> invalid and result.body.seq.switch[0].video <> invalid
      item.url = result.body.seq.switch[0].video@src
      item.isLoaded = true
      return true
    else if result.body.seq.par <> invalid and result.body.seq.par.switch <> invalid and result.body.seq.par.switch.count() > 0 and result.body.seq.par.switch[0] <> invalid and result.body.seq.par.switch[0].video <> invalid
      item.url = result.body.seq.par.switch[0].video@src
      item.isLoaded = true
      return true
    end if
  end if
  
  m.logError("MPX result did not yield any playable streams")
  return false
end function

public function getXMLSync(url)
  result = m.request.getSync(url)
  
  if result <> invalid and result <> ""
    xml = CreateObject("roXMLElement")
    if xml.Parse(result) 
      return xml
    end if
  end if
  
  m.logError("result could not be parsed")
  return invalid
end function


end class
end namespace
