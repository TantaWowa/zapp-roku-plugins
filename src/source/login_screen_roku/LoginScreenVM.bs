
import "pkg:/source/UIBuilder/view/ScreenVM.bs"
import "pkg:/source/lib/ViewUtils.bs"
import "pkg:/source/mixin/KeyboardDialogMixin.bs"

class LoginScreenVM extends zuib.ScreenVM

  'styles
  public inputStyle = invalid
  public loginButtonStyle = invalid
  public registerButtonStyle = invalid
  public forgotPasswordButtonStyle = invalid
  public usernamePlaceholderText = ""
  public passwordPlaceholderText = ""
  'state
  public isCredsValid = false
  public isLoginButtonEnabled = false
  public isRefreshing = true
  public usernameButtonType = "textInput"
  public passwordButtonType = "textInput"
  public isSubScreenVisible = false
  public isMainGroupVisible = false
  public currentScreen = invalid

  public usernameText = ""
  public username = ""
  public passwordText = ""
  public password = ""

  public errorText = ""
  public isErrorShowing = false

  private providerId = invalid
  private isShowingRegisterScreen = false
  private preScreenFocusId = "registerButton"
  private focusIds = ["usernameInput", "passwordInput", "loginButton", "registerButton", "forgotPasswordButton"]
  private maxDebugAccounts = 1
  private debugAccountId = 0

  public function new(riversJson)
    super(riversJson, "LoginScreenVM")
    m.focusId = "usernameInput"
    KeyboardDialogMixin.mixin(m)
    m.processStyles(m.riversJson.styles)
    m.providerId = m.getAuthProviderId()

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Overridden
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function createContent()
    m.logInfo("createContent is overridden in this screen")
  end function

  public override function load() as boolean
    if not m.isLoginRequired()
      m.logInfo("no need to show in this case")
      m.dismiss("success")
    else if m.getInstance("user").isLoggedIn
      m.logInfo("user is logged in, no need to show")
      m.dismiss("success")
    else
      m.logInfo("user not logged in - attemping refreshing")
      m.refreshLogin() 
    end if
    return true
  end function

  private function isLoginRequired()
    currentItem = mc.getContentField(m.getInstance("currentSelection"), "currentItem")
    if currentItem <> invalid and mc.getContentField(currentItem.json, "extensions.requires_authentication", false) = false
      return false
    else
      return true
    end if
  end function
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ styles
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function processStyles(styles)
    m.setField("usernameText", m.localizations.username_placeholder_text)
    m.usernamePlaceholderText = m.usernameText

    m.setField("passwordText", m.localizations.password_placeholder_text)
    m.passwordPlaceholderText = m.passwordText

    inputStyle = zc.ViewUtils.makeUIBButtonStyle(styles, "general_input", "textInputPlaceholder")

    m.setField("inputStyle", inputStyle)

    m.loginButtonStyle = zc.ViewUtils.makeUIBButtonStyle(styles, "login_button", "custom", styles.login_button_text)
    m.registerButtonStyle = zc.ViewUtils.makeUIBButtonStyle(styles, "register_button", "custom", styles.register_button_text)
    m.forgotPasswordButtonStyle = zc.ViewUtils.makeUIBButtonStyle(styles, "forgot_password_button", "custom", styles.forgot_password_button_text)
    m.maxDebugAccounts = zc.ViewUtils.getUIBInt(styles, "debug_max_accounts")
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function onLoginButtonSelected(value)
    m.logMethod("onLoginButtonSelected")

    if not m.isLoading and m.isCredsValid
      m.processLogin()
    else if not m.isCredsValid
      m.setField("errorText", "Please enter your email address and password")
      m.setfield("isErrorShowing", true)
    else
      m.logWarn("ignoring loging button, while loading")
    end if
  end function

  public function onUsernameButtonSelected(value)
    m.showKeyboardDialog("Enter your username", m.username, "onUsernameKeyboardDialogDismissal")
  end function

  public function onPasswordButtonSelected(value)
    m.showKeyboardDialog("Enter your password", m.password, "onPasswordKeyboardDialogDismissal", true)
  end function

  public function onRegisterButtonSelected(value)
    m.isShowingRegisterScreen = true
    screen = m.getScreen(m.riversJson.styles.register_screen)
    m.toggleSubScreen(screen)
  end function

  public function onForgotPasswordButtonSelected(value)
    screen = m.getScreen(m.riversJson.styles.forgot_password_screen)
    m.toggleSubScreen(screen)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ sub screen support
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function toggleSubScreen(screen)
    m.logMethod("toggleSubScreen")

    if m.focusId <> "screenContainer"
      m.preScreenFocusId = m.focusId
    end if

    if m.currentScreen <> invalid
      m.unbindNodeField(m.currentScreen, "state", "onsubScreenStateChange")
    end if

    m.setField("isSubScreenVisible", screen <> invalid)
    m.setField("isMainGroupVisible", screen = invalid)
    m.setField("currentScreen", invalid)

    if screen <> invalid
      m.setField("currentScreen", screen)
      m.onsubScreenStateChange(m.currentScreen.state)
      m.bindNodeField(m.currentScreen, "state", "onSubScreenStateChange", MOM.createBindingProperties(false))
      m.setFocusId("screenContainer")
    else
      m.setFocusId(m.preScreenFocusId)
    end if

  end function

  private function onSubScreenStateChange(state)
    m.logMethod("current screen state change", state, "m.isShowingRegisterScreen", m.isShowingRegisterScreen)

    if m.isShowingRegisterScreen and state = "success"
      m.signalAppLaunchDialog(true)
      m.dismiss("success")

    else if state = "success" or state = "cancel"
      m.toggleSubScreen(invalid)
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Keyboard dialog
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onUsernameKeyboardDialogDismissal(text)
    m.logMethod("onKeyboardDialogDismissal")
    KeyboardDialogMixin.setTextFromKeyboard(m, "username", text)
  end function

  private function onPasswordKeyboardDialogDismissal(text)
    m.logMethod("onPasswordKeyboardDialogDismissal")
    KeyboardDialogMixin.setTextFromKeyboard(m, "password", text, true)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ refresh
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function refreshLogin()
    m.logInfo("calling authTask to refresh login")

    m.authTask = m.createAuthTask("execLoad", m.providerId, "onRefreshComplete")

    m.setField("isRefreshing", true)
    m.setField("isMainGroupVisible", false)
    m.setField("isLoginButtonEnabled", false)
  end function

  private function onRefreshComplete(result)
    m.logMethod("onRefreshComplete", result)
    m.setField("isLoading", false)
    m.setField("isMainGroupVisible", true)

    if m.getInstance("user").isLoggedIn
      m.dismiss("success")
    else
      m.signalAppLaunchDialog(false)
      m.setField("isRefreshing", false)
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ login
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function checkCredsValid()
    m.setField("isCredsValid", m.usernameText <> invalid and m.usernameText.trim() <> "" and m.password <> invalid and m.password.trim() <> "")

    m.setField("isLoginButtonEnabled", m.isCredsValid and not m.isLoading)
  end function

  public function processLogin()
    m.logInfo("logging in")

    if m.isCredsValid
      creds = m.createInstance("AuthenticationCredentials")
      creds.username = m.usernameText
      creds.password = m.password
      m.authTask = m.createAuthTask("execLogIn", m.providerId, "onLoginComplete", creds)

      m.setField("isLoginButtonEnabled", false)

      m.setField("isLoading", true)
      m.setField("errorText", "")
      m.setField("isErrorShowing", false)
      m.setField("state", "loading")
    end if
  end function

  public function onLoginComplete(result)
    m.logMethod("onLoginComplete", result)

    if result <> invalid and result.state = "valid"
      m.logInfo("logged in succesfull")
      m.signalAppLaunchDialog(true)
      m.dismiss("success")

    else
      m.setField("state", "ready")
      if result <> invalid and result.message <> invalid
        m.setField("errorText", result.message)
      else
        m.setField("errorText", "Unknown error")
      end if
      m.setField("isErrorShowing", true)
      m.setField("isLoginButtonEnabled", true)
    end if

    m.setField("isLoading", false)

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ launch support
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  override function sendLaunchBecaon()
    'we handle this manually
  end function


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Handling
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function isCapturingAnyKeyPress(key, press)
    'do not anyone escape this screen!
    if press and key = "back" and not mc.getContentField(m.riversJson, "general.isflowBlocker", true)
      return false
    else
      return true
    end if
  end function

  public function onKeyPressBack() as boolean
    m.logMethod("onKeyPressBack", m.focusId)
    if m.isSubScreenVisible
      'this should be caught by the subscreen
      return true
    end if

    m.dismiss("cancel")
    return true
  end function

  public function onKeyPressRight() as boolean

    if m.focusId = "loginButton" and m.riversJson.styles.debug_skip_on_right = true
      m.logWarn("skipping debug flag is on")
      m.onLoginComplete(true)
    end if

    return false
  end function

  public function onKeyPressDown() as boolean
    m.logMethod("onKeyPressDown", m.focusId)
    if not m.isSubScreenVisible 
      m.setFocusId(mc.getItemAtOffset(m.focusIds, m.focusId, 1))
    end if
    return true
  end function

  public override function onKeyPressUp() as boolean
    m.logMethod("onKeyPressUp", m.focusId)
    if not m.isSubScreenVisible
      m.setFocusId(mc.getItemAtOffset(m.focusIds, m.focusId, -1))
    end if
    return true
  end function

  public function onKeyPressOption() as boolean
    m.logMethod("onKeyPressOption", m.focusId)
    m.debugAccountId++
    if m.debugAccountId > m.maxDebugAccounts
      m.debugAccountId = 1
    end if
    username = m.riversJson.styles.debug_username.replace("@", str(m.debugAccountId).trim() + "@")
    m.onUsernameKeyboardDialogDismissal(username)
    m.onPasswordKeyboardDialogDismissal(m.riversJson.styles.debug_password)

    return true
  end function

end class
