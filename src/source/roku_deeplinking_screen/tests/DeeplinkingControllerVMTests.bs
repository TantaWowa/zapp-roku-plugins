'@Only
'@TestSuite DCVMT DeeplinkingControllerVMTests

namespace Applicaster.Deeplinking.DeeplinkingControllerVMTests

'@BeforeEach
function BeforeEach()
  m.riversJson = {
    styles: {
      detail_screen: "detailScreen"
      series_screen: "seriesScreen"
      episode_screen: "episodeScreen"
    }
  }
  
  m.vm = new DeeplinkingControllerVM(m.riversJson)
end function

'@AfterEach
function afterEach()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests constructor
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test 
function constructor()
  m.assertEqual(m.vm.screenIdsByName, {
    "season": "seriesScreen"
    "episode": "episodeScreen"
    "detail": "detailScreen"
  })
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests togglePrehookController
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test set controller - none set
function togglePrehookController_none_set()
  controller = { "id" : "controller" }
  
  m.expectOnce(m.vm, "bindNodefield", [controller, "state", "onPrehookControllerStateChange", MOM.createBindingProperties(false, invalid, true)])
  
  m.vm.togglePrehookController(true, controller)
  
  m.assertEqual(m.vm.currentScreen, controller)
  
end function

'@Test replace controller
function togglePrehookController_replace()
  controller = { "id" : "controller" }
  
  m.vm.currentScreen = { "id" : "controller" }
  
  m.expectOnce(m.vm, "unbindNodeField", [controller, "state", "onPrehookControllerStateChange"])
  
  m.expectOnce(m.vm, "bindNodefield", [controller, "state", "onPrehookControllerStateChange", MOM.createBindingProperties(false, invalid, true)])
  
  m.vm.togglePrehookController(true, controller)
  
  m.assertEqual(m.vm.currentScreen, controller)
  
end function


'@Test unset, with screen 
function togglePrehookController()
  controller = { "id" : "controller" }
  m.vm.currentScreen = controller
  m.expectOnce(m.vm, "unbindNodeField", [controller, "state", "onPrehookControllerStateChange"])
  
  m.vm.togglePrehookController(false)
  
  m.assertInvalid(m.vm.currentScreen)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onPrehookControllerStateChange
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test success
function onPrehookControllerStateChange_success()
  screen = { "id" : "screen" }
  m.vm.currentScreen = screen
  
  args = { "id" : "args" }
  m.expectOnce(m.vm, "getInstance", ["deeplinkingArgs"], args)
  m.expectOnce(m.vm, "toggleDeeplinkingTask", [true, args])
  m.expectNone(m.vm, "dismissDeeplinkingController")
  
  m.vm.onPrehookControllerStateChange("success")
  
  m.assertInvalid(m.vm.currentScreen)
  
end function

'@Test other states
'@Params["error"]
'@Params["cancel"]
function onPrehookControllerStateChange_other(state)
  screen = { "id" : "screen" }
  m.vm.currentScreen = screen
  
  m.expectNone(m.vm, "applyDeeplinking")
  m.expectOnce(m.vm, "dismissDeeplinkingController", [])
  
  m.vm.onPrehookControllerStateChange(state)
  
  m.assertInvalid(m.vm.currentScreen)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests dismissDeeplinkingController
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test live
function dismissDeeplinkingController_live()
  m.vm.isLivePrehook = true
  
  m.expectNone(m.vm, "showPrehookContent")
  m.expectOnce(m.vm, "exitFromDeeplinking", [])
  m.expectNone(m.vm, "exitApp")
  
  m.vm.dismissDeeplinkingController()
end function

'@Test launch
function dismissDeeplinkingController_launch()
  m.vm.isLivePrehook = false
  
  m.expectNone(m.vm, "showPrehookContent")
  m.expectNone(m.vm, "exitFromDeeplinking")
  m.expectOnce(m.vm, "exitApp")
  
  m.vm.dismissDeeplinkingController()
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests getPrehookController
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test  none
'@Params[{ "id" : "screen"}]
'@Params[{ "id" : "screen", "hooks": {"preload_plugins":invalid}}]
'@Params[{"hooks": {"preload_plugins":[]}}]
function getPrehookController_no_prehooks(riversJson)
  m.vm.riversJson = riversJson
  m.assertInvalid(m.vm.getPrehookController())
end function

'@Test hooks
'@Params[{ "id" : "s1", "hooks": {"preload_plugins":[{"id": 1}]}}]
'@Params[{ "id" : "s2", "hooks": {"preload_plugins":[{"id": 1}]}}]
'@Params[{ "id" : "s3", "hooks": {"preload_plugins":[{"id": 1},{"id": 2}]}}]
'@Params[{ "id" : "s4", "hooks": {"preload_plugins":[{"id": 1},{"id": 2}]}}]
function getPrehookController_with_prehooks(riversJson)
  
  
  m.vm.riversJson = riversJson
  hooks = MU.getContentField(riversJson, "hooks.preload_plugins") 
  mockScreen = { "id" : "screen" }
  
  m.expectOnce(m.vm, "createInstance", ["ScreenHookController", invalid, "prehooksController"], mockScreen)
  
  currentScreen = m.vm.getPrehookController()
  
  m.assertEqual(currentScreen, mockScreen)
  m.AssertArrayCount(currentScreen.hooks, hooks.count())
  m.AssertArrayContainsSubset(currentScreen.hooks, hooks)
  m.assertInvalid(currentScreen.targetScreen)
  m.assertFalse(currentScreen.isManagingScreensOnCompletion)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onShow
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test has prehooks
function onShow_has_prehook()
  prehookController = { "id" : "prehookController" }
  
  m.expectOnce(m.vm, "getPrehookController", [], prehookController)
  m.expectOnce(m.vm, "togglePrehookController", [true, prehookController])
  m.expectNone(m.vm, "getInstance")
  m.expectNone(m.vm, "toggleDeeplinkingTask")
  
  m.vm.onShow()
  m.assertFalse(m.vm.isShowingParentScreen)
  
end function

'@Test no prehooks
function onShow_no_prehook()
  args = { "id" : "args" }
  m.expectOnce(m.vm, "getPrehookController", [], invalid)
  m.expectNone(m.vm, "togglePrehookController")
  m.expectOnce(m.vm, "getInstance", ["deeplinkingArgs"], args)
  m.expectOnce(m.vm, "toggleDeeplinkingTask", [true, args])
  
  m.vm.onShow()
  
  m.assertFalse(m.vm.isShowingParentScreen)
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests applyDeeplinking
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test invalid selection
function applyDeeplinking_invalid_selection()
  deeplinkingData = {
    "id" : "deeplinkingData"
    "itemType": "series"
    "isShowingParentScreen": false
  }
  
  m.expectOnce(m.vm, "getDeeplinkingSelectionWithData", [deeplinkingData], invalid)
  m.expectNone(m.vm, "getParentScreen")
  m.expectNone(m.vm, "playSelection")
  m.expectNone(m.vm, "signalAppLaunchComplete")
  m.expectOnce(m.vm, "dismissDeeplinkingController", [])
  
  m.vm.applyDeepLinking(deeplinkingData)
  
end function

'@Test video and parent screen present
'@Params[true]
'@Params[false]
function applyDeeplinking_onlyVideo_parent_screen(isLaunchPrehook)
  parentEntry = { "id" : "parentEntry" }
  parentScreen = { "id" : "parentScreen" }
  
  entry = { "id" : "entry" }
  deeplinkingData = {
    "id" : "deeplinkingData"
    "parentEntry": parentEntry
    "entry": entry
    "itemType": "series"
  }
  selection = { "id" : "selection", "action": "play" }
  m.vm.isLivePrehook = not isLaunchPrehook
  m.expectOnce(m.vm, "getDeeplinkingSelectionWithData", [deeplinkingData], selection)
  m.expectOnce(m.vm, "getParentScreen", ["series", parentEntry], parentScreen)
  m.expectOnce(m.vm, "playSelection", [selection])
  m.expectOnceOrNone(m.vm, "signalAppLaunchComplete", isLaunchPrehook, [])
  
  m.vm.applyDeepLinking(deeplinkingData)
  
  m.assertEqual(m.vm.currentScreen, parentScreen)
  m.assertTrue(m.vm.isShowingParentScreen)
  
end function

'@Test video and parent screen present; showing detail
'@Params[true, "play", true]
'@Params[false, "play", true]
'@Params[true, "display", false]
'@Params[false, "display", false]
function applyDeeplinking_onlyVideo_parent_screen_detail(isLaunchPrehook, action, isPlaying)
  parentEntry = { "id" : "parentEntry" }
  parentScreen = { "id" : "parentScreen" }
  
  entry = { "id" : "entry" }
  deeplinkingData = {
    "id" : "deeplinkingData"
    "parentEntry": parentEntry
    "entry": entry
    "itemType": "series"
    "isShowingParentScreen": false
  }
  selection = { "id" : "selection", "action": action }
  m.vm.isLivePrehook = not isLaunchPrehook
  m.expectOnce(m.vm, "getDeeplinkingSelectionWithData", [deeplinkingData], selection)
  m.expectOnce(m.vm, "getParentScreen", ["series", parentEntry], invalid)
  m.expectOnce(m.vm, "getParentScreen", ["detail", entry], parentScreen)
  m.expectOnceOrNone(m.vm, "playSelection", isPlaying, [selection])
  m.expectOnceOrNone(m.vm, "signalAppLaunchComplete", isLaunchPrehook, [])
  
  m.vm.applyDeepLinking(deeplinkingData)
  
  m.assertEqual(m.vm.currentScreen, parentScreen)
  m.assertTrue(m.vm.isShowingParentScreen)
  
end function

'@Test only video
'@Params[true]
'@Params[false]
function applyDeeplinking_onlyVideo(isLaunchPrehook)
  parentEntry = { "id" : "parentEntry" }
  entry = { "id" : "entry" }
  deeplinkingData = {
    "id" : "deeplinkingData"
    "parentEntry": parentEntry
    "entry": entry
    "itemType": "series"
    "isShowingParentScreen": false
  }
  selection = { "id" : "selection", "action": "play" }
  m.vm.isLivePrehook = not isLaunchPrehook
  m.expectOnce(m.vm, "getDeeplinkingSelectionWithData", [deeplinkingData], selection)
  m.expectOnce(m.vm, "getParentScreen", ["series", parentEntry], invalid)
  m.expectOnce(m.vm, "getParentScreen", ["detail", entry], invalid)
  m.expectOnce(m.vm, "playSelection", [selection])
  m.expectOnceOrNone(m.vm, "signalAppLaunchComplete", isLaunchPrehook, [])
  
  m.vm.applyDeepLinking(deeplinkingData)
  m.assertFalse(m.vm.isShowingParentScreen)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests getDeeplinkingSelectionWithData
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test sets properties for non-episode types
'@Params["channel"]
'@Params["vod"]
'@Params["collection"]
function getDeeplinkingSelectionWithData_valid_notSeasonOrSeries(itemType)
  collection = Applicaster.Selection.Tests.createCollection(3)
  deeplinkingData = createObject("roSGNode", "DeeplinkingData")
  deeplinkingData.action = "play"
  deeplinkingData.itemType = itemType
  deeplinkingData.entry = collection
  deeplinkingData.contentId = collection.getchild(1).id
  deeplinkingData.isValid = true
  
  selection = m.vm.getDeeplinkingSelectionWithData(deeplinkingData)
  
  m.AssertEqual(selection.action, "play")
  m.AssertEqual(selection.currentItem.id, deeplinkingData.entry.id)
  m.AssertEqual(selection.collection.id, deeplinkingData.entry.id)
end function

'@Test valid season or series with found episode
'@Params["series"]
'@Params["season"]
function getDeeplinkingSelectionWithData_valid_SeasonOrSeries(itemType)
  collection = Applicaster.Selection.Tests.createCollection(3)
  collection.id = "expectedId"
  deeplinkingData = createObject("roSGNode", "DeeplinkingData")
  deeplinkingData.action = "play"
  deeplinkingData.itemType = itemType
  deeplinkingData.entry = collection
  deeplinkingData.isValid = true
  
  selection = m.vm.getDeeplinkingSelectionWithData(deeplinkingData)
  
  m.AssertEqual(selection.action, "play")
  m.AssertEqual(selection.currentItem.id, "expectedId")
  m.AssertEqual(selection.collection.id, "expectedId")
end function

'@Test sets properties series and season types, invalid episode
'@Params["series"]
'@Params["season"]
function getDeeplinkingSelectionWithData_seasonSeries_invalidEpisode(itemType)
  collection = Applicaster.Selection.Tests.createCollection(3)
  deeplinkingData = createObject("roSGNode", "DeeplinkingData")
  deeplinkingData.action = "play"
  deeplinkingData.itemType = itemType
  deeplinkingData.entry = collection
  deeplinkingData.contentId = "notFound"
  deeplinkingData.isValid = true
  
  selection = m.vm.getDeeplinkingSelectionWithData(deeplinkingData)
  
  m.AssertEqual(selection.action, "play")
  m.AssertEqual(selection.currentItem.id, deeplinkingData.entry.id)
  m.AssertEqual(selection.collection.id, deeplinkingData.entry.id)
end function

'@Test sets properties series and season types, valid episode
'@Params["series"]
'@Params["season"]
function getDeeplinkingSelectionWithData_seasonSeries_validEpisode(itemType)
  collection = Applicaster.Selection.Tests.createCollection(3)
  deeplinkingData = createObject("roSGNode", "DeeplinkingData")
  deeplinkingData.action = "play"
  deeplinkingData.itemType = itemType
  deeplinkingData.entry = collection.getchild(1)
  deeplinkingData.contentId = deeplinkingData.entry.id
  deeplinkingData.isValid = true
  
  selection = m.vm.getDeeplinkingSelectionWithData(deeplinkingData)
  
  m.AssertEqual(selection.action, "play")
  m.AssertEqual(selection.currentItem.id, deeplinkingData.entry.id)
  m.AssertEqual(selection.collection.id, deeplinkingData.entry.id)
end function

'@Test does not set when deeplinkingData is not valid
'@Params["channel"]
'@Params["vod"]
'@Params["collection"]
'@Params["season"]
'@Params["series"]
function getDeeplinkingSelectionWithData_notValid(itemType)
  collection = Applicaster.Selection.Tests.createCollection(3)
  deeplinkingData = createObject("roSGNode", "DeeplinkingData")
  deeplinkingData.action = "play"
  deeplinkingData.itemType = itemType
  deeplinkingData.entry = collection.getchild(0)
  deeplinkingData.contentId = deeplinkingData.entry.id
  deeplinkingData.isValid = false
  
  selection = m.vm.getDeeplinkingSelectionWithData(deeplinkingData)
  
  m.AssertInvalid(selection)
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests toggleDeeplinkingTask
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test inactive no task
'@Params[true]
'@Params[false]
function toggleDeeplinkingTask_inactive_no_task(navMenuFocusable)
  m.vm.isNAvMenuFocusable = navMenuFocusable
  
  m.expectNone(m.vm, "unbindNodeField")
  m.expectNone(m.vm, "createInstance")
  m.expectNone(m.vm, "bindNodeField")
  
  m.vm.toggleDeeplinkingTask(false)
  
  m.assertFalse(m.vm.isLoadingIndicatorVisible)
end function

'@Test inactive with task
'@Params[true]
'@Params[false]
function toggleDeeplinkingTask_inactive_task(navMenuFocusable)
  m.vm.isNavMenuFocusable = navMenuFocusable
  m.vm.deeplinkingTask = { "id": "task" }
  
  m.expectOnce(m.vm, "unbindNodeField", [m.vm.deeplinkingTask, "deeplinkingData", "onDeeplinkingTaskResult"])
  m.expectNone(m.vm, "createInstance")
  m.expectNone(m.vm, "bindNodeField")
  
  m.vm.toggleDeeplinkingTask(false)
  
  m.assertInvalid(m.vm.deeplinkingTask)
  
  m.assertFalse(m.vm.isLoadingIndicatorVisible)
  
end function


'@Test active -no task
function toggleDeeplinkingTask_active()
  deeplinkingTask = { "id": "task" }
  args = { "id": "args" }
  
  m.expectOnce(m.vm, "createInstance", ["DeeplinkingTask", invalid, "deeplinkingTask"], deeplinkingTask)
  m.expectOnce(m.vm, "bindNodeField", [deeplinkingTask, "deeplinkingData", "onDeeplinkingTaskResult", MOM.createBindingProperties(false, invalid, true)]) 
  
  m.vm.toggleDeeplinkingTask(true, args)
  
  m.assertEqual(deeplinkingTask.args, args)
  m.assertEqual(deeplinkingTask.control, "run")
  
  m.assertTrue(m.vm.isLoadingIndicatorVisible)
end function

'@Test active - with task
function toggleDeeplinkingTask_active_with_task()
  m.vm.deeplinkingTask = { "id": "old_task" }
  deeplinkingTask = { "id": "task" }
  args = { "id": "args" }
  
  m.expectOnce(m.vm, "unbindNodeField", [m.vm.deeplinkingTask, "deeplinkingData", "onDeeplinkingTaskResult"])
  
  m.expectOnce(m.vm, "createInstance", ["DeeplinkingTask", invalid, "deeplinkingTask"], deeplinkingTask)
  m.expectOnce(m.vm, "bindNodeField", [deeplinkingTask, "deeplinkingData", "onDeeplinkingTaskResult", MOM.createBindingProperties(false, invalid, true)]) 
  
  m.vm.toggleDeeplinkingTask(true, args)
  
  m.assertEqual(deeplinkingTask.args, args)
  m.assertEqual(deeplinkingTask.control, "run")
  m.assertTrue(m.vm.isLoadingIndicatorVisible)
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests onDeeplinkingTaskResult
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test data isValid
function onDeeplinkingTaskResult_valid()
  data = createObject("roSGNode", "DeeplinkingData")
  data.isValid = true
  data.id = "dld"
  
  m.expectOnce(m.vm, "applyDeeplinking", [data])
  
  m.vm.onDeeplinkingTaskResult(data)
end function

end namespace